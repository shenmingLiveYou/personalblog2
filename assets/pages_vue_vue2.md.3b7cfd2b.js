import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.cfbd61a4.js";const d=JSON.parse('{"title":"Vue2","description":"","frontmatter":{},"headers":[],"relativePath":"pages/vue/vue2.md","filePath":"pages/vue/vue2.md","lastUpdated":null}'),p={name:"pages/vue/vue2.md"},e=l(`<h1 id="vue2" tabindex="-1">Vue2 <a class="header-anchor" href="#vue2" aria-label="Permalink to &quot;Vue2&quot;">​</a></h1><h2 id="一、脚手架文件结构" tabindex="-1">一、脚手架文件结构 <a class="header-anchor" href="#一、脚手架文件结构" aria-label="Permalink to &quot;一、脚手架文件结构&quot;">​</a></h2><pre><code>├── node_modules 
├── public
│   ├── favicon.ico: 页签图标
│   └── index.html: 主页面
├── src
│   ├── assets: 存放静态资源
│   │   └── logo.png
│   │── component: 存放组件
│   │   └── HelloWorld.vue
│   │── App.vue: 汇总所有组件
│   │── main.js: 入口文件
├── .gitignore: git版本管制忽略的配置
├── babel.config.js: babel的配置文件
├── package.json: 应用包配置文件 
├── README.md: 应用描述文件
├── package-lock.json：包版本控制文件
</code></pre><h2 id="_1-关于不同版本的vue" tabindex="-1">1. 关于不同版本的Vue <a class="header-anchor" href="#_1-关于不同版本的vue" aria-label="Permalink to &quot;1. 关于不同版本的Vue&quot;">​</a></h2><ol><li>vue.js与vue.runtime.xxx.js的区别： <ol><li>vue.js是完整版的Vue，包含：核心功能 + 模板解析器。</li><li>vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</li></ol></li><li>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template这个配置项，需要使用render函数接收到的createElement函数去指定具体内容。</li></ol><h2 id="_2-vue-config-js配置文件" tabindex="-1">2. vue.config.js配置文件 <a class="header-anchor" href="#_2-vue-config-js配置文件" aria-label="Permalink to &quot;2. vue.config.js配置文件&quot;">​</a></h2><ol><li>使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。</li><li>使用vue.config.js可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh" target="_blank" rel="noreferrer">https://cli.vuejs.org/zh</a></li></ol><h2 id="_3-ref属性" tabindex="-1">3. ref属性 <a class="header-anchor" href="#_3-ref属性" aria-label="Permalink to &quot;3. ref属性&quot;">​</a></h2><ol><li>被用来给元素或子组件注册引用信息（id的替代者）</li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li><li>使用方式： <ol><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><h2 id="_4-props配置项" tabindex="-1">4. props配置项 <a class="header-anchor" href="#_4-props配置项" aria-label="Permalink to &quot;4. props配置项&quot;">​</a></h2><ol><li><p>功能：让组件接收外部传过来的数据</p></li><li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p></li><li><p>接收数据：</p><ol><li><p>第一种方式（只接收）：<code>props:[&#39;name&#39;] </code></p></li><li><p>第二种方式（限制类型）：<code>props:{name:String}</code></p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">props</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">:String, </span><span style="color:#6A737D;">//类型</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">required</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//必要性</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&#39;老王&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//默认值</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">props</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">:String, </span><span style="color:#6A737D;">//类型</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">required</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//必要性</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;老王&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//默认值</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ol><blockquote><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p></blockquote></li></ol><h2 id="_5-mixin-混入" tabindex="-1">5. mixin(混入) <a class="header-anchor" href="#_5-mixin-混入" aria-label="Permalink to &quot;5. mixin(混入)&quot;">​</a></h2><ol><li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式：</p><p>第一步定义混合：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">{</span></span>
<span class="line"><span style="color:#e1e4e8;">    data(){....},</span></span>
<span class="line"><span style="color:#e1e4e8;">    methods:{....}</span></span>
<span class="line"><span style="color:#e1e4e8;">    ....</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">{</span></span>
<span class="line"><span style="color:#24292e;">    data(){....},</span></span>
<span class="line"><span style="color:#24292e;">    methods:{....}</span></span>
<span class="line"><span style="color:#24292e;">    ....</span></span>
<span class="line"><span style="color:#24292e;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>第二步使用混入：</p><p>​ 全局混入：<code>Vue.mixin(xxx)</code> ​ 局部混入：<code>mixins:[&#39;xxx&#39;] </code></p></li></ol><h2 id="_6-插件" tabindex="-1">6. 插件 <a class="header-anchor" href="#_6-插件" aria-label="Permalink to &quot;6. 插件&quot;">​</a></h2><ol><li><p>功能：用于增强Vue</p></li><li><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p></li><li><p>定义插件：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">对象.</span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">Vue</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 1. 添加全局过滤器</span></span>
<span class="line"><span style="color:#E1E4E8;">    Vue.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">.)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 2. 添加全局指令</span></span>
<span class="line"><span style="color:#E1E4E8;">    Vue.</span><span style="color:#B392F0;">directive</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">.)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 3. 配置全局混入(合)</span></span>
<span class="line"><span style="color:#E1E4E8;">    Vue.</span><span style="color:#B392F0;">mixin</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">.)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 4. 添加实例方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$myMethod</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.$myProperty </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> xxxx</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">对象.</span><span style="color:#6F42C1;">install</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">Vue</span><span style="color:#24292E;">, </span><span style="color:#E36209;">options</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 1. 添加全局过滤器</span></span>
<span class="line"><span style="color:#24292E;">    Vue.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">.)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 2. 添加全局指令</span></span>
<span class="line"><span style="color:#24292E;">    Vue.</span><span style="color:#6F42C1;">directive</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">.)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 3. 配置全局混入(合)</span></span>
<span class="line"><span style="color:#24292E;">    Vue.</span><span style="color:#6F42C1;">mixin</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">.)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 4. 添加实例方法</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$myMethod</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.$myProperty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> xxxx</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li><li><p>使用插件：<code>Vue.use()</code></p></li></ol><h2 id="_7-scoped样式" tabindex="-1">7. scoped样式 <a class="header-anchor" href="#_7-scoped样式" aria-label="Permalink to &quot;7. scoped样式&quot;">​</a></h2><ol><li>作用：让样式在局部生效，防止冲突。</li><li>写法：<code>&lt;style scoped&gt;</code></li></ol><h2 id="_8-总结组件开发流程" tabindex="-1">8. 总结组件开发流程 <a class="header-anchor" href="#_8-总结组件开发流程" aria-label="Permalink to &quot;8. 总结组件开发流程&quot;">​</a></h2><ol><li><p>组件化编码流程：</p><p>​ (1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p><p>​ (2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><p>​ 1).一个组件在用：放在组件自身即可。</p><p>​ 2). 一些组件在用：放在他们共同的父组件上（<span style="color:red;">状态提升</span>）。</p><p>​ (3).实现交互：从绑定事件开始。</p></li><li><p>props适用于：</p><p>​ (1).父组件 ==&gt; 子组件 通信</p><p>​ (2).子组件 ==&gt; 父组件 通信（要求父先给子一个函数）</p></li><li><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p></li><li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p></li></ol><h2 id="_9-webstorage" tabindex="-1">9. webStorage <a class="header-anchor" href="#_9-webstorage" aria-label="Permalink to &quot;9. webStorage&quot;">​</a></h2><ol><li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code> 该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</p></li><li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p><p>​ 该方法接受一个键名作为参数，返回键名对应的值。</p></li><li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p><p>​ 该方法接受一个键名作为参数，并把该键名从存储中删除。</p></li><li><p><code> xxxxxStorage.clear()</code></p><p>​ 该方法会清空存储中的所有数据。</p></li></ol></li><li><p>备注：</p><ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage存储的内容，需要手动清除才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><h2 id="_10-组件的自定义事件" tabindex="-1">10. 组件的自定义事件 <a class="header-anchor" href="#_10-组件的自定义事件" aria-label="Permalink to &quot;10. 组件的自定义事件&quot;">​</a></h2><ol><li><p>一种组件间通信的方式，适用于：<strong style="color:red;">子组件 ===&gt; 父组件</strong></p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:red;">事件的回调在A中</span>）。</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code> 或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p></li><li><p>第二种方式，在父组件中：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Demo</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;demo&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#F97583;">......</span></span>
<span class="line"><span style="color:#B392F0;">mounted</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$refs.xxx.</span><span style="color:#B392F0;">$on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;atguigu&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.test)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">Demo</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;demo&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#D73A49;">......</span></span>
<span class="line"><span style="color:#6F42C1;">mounted</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$refs.xxx.</span><span style="color:#6F42C1;">$on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;atguigu&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.test)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code></p></li><li><p>解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red;">要么配置在methods中</span>，<span style="color:red;">要么用箭头函数</span>，否则this指向会出问题！</p></li></ol><h2 id="_11-全局事件总线-globaleventbus" tabindex="-1">11. 全局事件总线（GlobalEventBus） <a class="header-anchor" href="#_11-全局事件总线-globaleventbus" aria-label="Permalink to &quot;11. 全局事件总线（GlobalEventBus）&quot;">​</a></h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red;">任意组件间通信</span>。</p></li><li><p>安装全局事件总线：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vue</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">......</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">beforeCreate</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">		Vue.prototype.$bus </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//安装全局事件总线，$bus就是当前应用的vm</span></span>
<span class="line"><span style="color:#E1E4E8;">	},</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">......</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vue</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">......</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">beforeCreate</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">		Vue.prototype.$bus </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//安装全局事件总线，$bus就是当前应用的vm</span></span>
<span class="line"><span style="color:#24292E;">	},</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">......</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:red;">回调留在A组件自身。</span></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">methods</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">demo</span><span style="color:#E1E4E8;">(data){</span><span style="color:#F97583;">......</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">......</span></span>
<span class="line"><span style="color:#B392F0;">mounted</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$bus.</span><span style="color:#B392F0;">$on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;xxxx&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.demo)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">methods</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">demo</span><span style="color:#24292E;">(data){</span><span style="color:#D73A49;">......</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">......</span></span>
<span class="line"><span style="color:#6F42C1;">mounted</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$bus.</span><span style="color:#6F42C1;">$on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;xxxx&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.demo)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑<span style="color:red;">当前组件所用到的</span>事件。</p></li></ol><h2 id="_12-消息订阅与发布-pubsub" tabindex="-1">12. 消息订阅与发布（pubsub） <a class="header-anchor" href="#_12-消息订阅与发布-pubsub" aria-label="Permalink to &quot;12. 消息订阅与发布（pubsub）&quot;">​</a></h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red;">任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red;">回调留在A组件自身。</span></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">methods</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">demo</span><span style="color:#E1E4E8;">(data){</span><span style="color:#F97583;">......</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">......</span></span>
<span class="line"><span style="color:#B392F0;">mounted</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.pid </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pubsub.</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;xxx&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.demo) </span><span style="color:#6A737D;">//订阅消息</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">methods</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">demo</span><span style="color:#24292E;">(data){</span><span style="color:#D73A49;">......</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">......</span></span>
<span class="line"><span style="color:#6F42C1;">mounted</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.pid </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pubsub.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;xxx&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.demo) </span><span style="color:#6A737D;">//订阅消息</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red;">取消订阅。</span></p></li></ol></li></ol><h2 id="_13-nexttick" tabindex="-1">13. nextTick <a class="header-anchor" href="#_13-nexttick" aria-label="Permalink to &quot;13. nextTick&quot;">​</a></h2><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><h2 id="_14-vue封装的过度与动画" tabindex="-1">14. Vue封装的过度与动画 <a class="header-anchor" href="#_14-vue封装的过度与动画" aria-label="Permalink to &quot;14. Vue封装的过度与动画&quot;">​</a></h2><ol><li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>图示：<img src="https://img04.sogoucdn.com/app/a/100520146/5990c1dff7dc7a8fb3b34b4462bd0105" style="width:60%;"></p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式： <ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式： <ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">transition</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">	&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">transition</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">	&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">transition</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li></ol></li></ol><h2 id="_14-vue脚手架配置代理" tabindex="-1">14. vue脚手架配置代理 <a class="header-anchor" href="#_14-vue脚手架配置代理" aria-label="Permalink to &quot;14. vue脚手架配置代理&quot;">​</a></h2><h3 id="方法一" tabindex="-1">方法一 <a class="header-anchor" href="#方法一" aria-label="Permalink to &quot;方法一&quot;">​</a></h3><p>​ 在vue.config.js中添加如下配置：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">devServer</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">proxy</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&quot;http://localhost:5000&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">devServer</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">proxy</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&quot;http://localhost:5000&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><h3 id="方法二" tabindex="-1">方法二 <a class="header-anchor" href="#方法二" aria-label="Permalink to &quot;方法二&quot;">​</a></h3><p>​ 编写vue.config.js配置具体代理规则：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	devServer: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      proxy: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;/api1&#39;</span><span style="color:#E1E4E8;">: {</span><span style="color:#6A737D;">// 匹配所有以 &#39;/api1&#39;开头的请求路径</span></span>
<span class="line"><span style="color:#E1E4E8;">        target: </span><span style="color:#9ECBFF;">&#39;http://localhost:5000&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">// 代理目标的基础路径</span></span>
<span class="line"><span style="color:#E1E4E8;">        changeOrigin: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        pathRewrite: {</span><span style="color:#9ECBFF;">&#39;^/api1&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;/api2&#39;</span><span style="color:#E1E4E8;">: {</span><span style="color:#6A737D;">// 匹配所有以 &#39;/api2&#39;开头的请求路径</span></span>
<span class="line"><span style="color:#E1E4E8;">        target: </span><span style="color:#9ECBFF;">&#39;http://localhost:5001&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">// 代理目标的基础路径</span></span>
<span class="line"><span style="color:#E1E4E8;">        changeOrigin: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        pathRewrite: {</span><span style="color:#9ECBFF;">&#39;^/api2&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span>
<span class="line"><span style="color:#6A737D;">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span>
<span class="line"><span style="color:#6A737D;">   changeOrigin默认值为true</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	devServer: {</span></span>
<span class="line"><span style="color:#24292E;">      proxy: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;/api1&#39;</span><span style="color:#24292E;">: {</span><span style="color:#6A737D;">// 匹配所有以 &#39;/api1&#39;开头的请求路径</span></span>
<span class="line"><span style="color:#24292E;">        target: </span><span style="color:#032F62;">&#39;http://localhost:5000&#39;</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">// 代理目标的基础路径</span></span>
<span class="line"><span style="color:#24292E;">        changeOrigin: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        pathRewrite: {</span><span style="color:#032F62;">&#39;^/api1&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;/api2&#39;</span><span style="color:#24292E;">: {</span><span style="color:#6A737D;">// 匹配所有以 &#39;/api2&#39;开头的请求路径</span></span>
<span class="line"><span style="color:#24292E;">        target: </span><span style="color:#032F62;">&#39;http://localhost:5001&#39;</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">// 代理目标的基础路径</span></span>
<span class="line"><span style="color:#24292E;">        changeOrigin: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        pathRewrite: {</span><span style="color:#032F62;">&#39;^/api2&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span>
<span class="line"><span style="color:#6A737D;">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span>
<span class="line"><span style="color:#6A737D;">   changeOrigin默认值为true</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h2 id="_15-插槽" tabindex="-1">15. 插槽 <a class="header-anchor" href="#_15-插槽" aria-label="Permalink to &quot;15. 插槽&quot;">​</a></h2><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red;">父组件 ===&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">父组件中：</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">Category</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">           &lt;div&gt;html结构1&lt;/div&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">Category</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">子组件中：</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#6A737D;">&lt;!-- 定义插槽 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">               &lt;</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;">&gt;插槽默认内容...&lt;/</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">父组件中：</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">Category</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">           &lt;div&gt;html结构1&lt;/div&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">Category</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">子组件中：</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6A737D;">&lt;!-- 定义插槽 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">               &lt;</span><span style="color:#22863A;">slot</span><span style="color:#24292E;">&gt;插槽默认内容...&lt;/</span><span style="color:#22863A;">slot</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li><p>具名插槽：</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">父组件中：</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">Category</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;template slot=&quot;center&quot;&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">              &lt;div&gt;html结构1&lt;/div&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;/template&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;template v-slot:footer&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">               &lt;div&gt;html结构2&lt;/div&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;/template&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">Category</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">子组件中：</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">               </span><span style="color:#6A737D;">&lt;!-- 定义插槽 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">               &lt;</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;center&quot;</span><span style="color:#E1E4E8;">&gt;插槽默认内容...&lt;/</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">               &lt;</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;footer&quot;</span><span style="color:#E1E4E8;">&gt;插槽默认内容...&lt;/</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">父组件中：</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">Category</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;template slot=&quot;center&quot;&gt;</span></span>
<span class="line"><span style="color:#24292E;">              &lt;div&gt;html结构1&lt;/div&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;/template&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            &lt;template v-slot:footer&gt;</span></span>
<span class="line"><span style="color:#24292E;">               &lt;div&gt;html结构2&lt;/div&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;/template&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">Category</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">子组件中：</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">               </span><span style="color:#6A737D;">&lt;!-- 定义插槽 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">               &lt;</span><span style="color:#22863A;">slot</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;center&quot;</span><span style="color:#24292E;">&gt;插槽默认内容...&lt;/</span><span style="color:#22863A;">slot</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">               &lt;</span><span style="color:#22863A;">slot</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;footer&quot;</span><span style="color:#24292E;">&gt;插槽默认内容...&lt;/</span><span style="color:#22863A;">slot</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></li><li><p>作用域插槽：</p><ol><li><p>理解：<span style="color:red;">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体编码：</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">父组件中：</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;</span><span style="color:#85E89D;">Category</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">			&lt;template scope=&quot;scopeData&quot;&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				&lt;!-- 生成的是ul列表 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				&lt;ul&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">					&lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;{{g}}&lt;/li&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				&lt;/ul&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">			&lt;/template&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;/</span><span style="color:#85E89D;">Category</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;</span><span style="color:#85E89D;">Category</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">			&lt;template slot-scope=&quot;scopeData&quot;&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				&lt;!-- 生成的是h4标题 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				&lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;{{g}}&lt;/h4&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">			&lt;/template&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		&lt;/</span><span style="color:#85E89D;">Category</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">子组件中：</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:games</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;games&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                name:</span><span style="color:#9ECBFF;">&#39;Category&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                props:[</span><span style="color:#9ECBFF;">&#39;title&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//数据在子组件自身</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        games:[</span><span style="color:#9ECBFF;">&#39;红色警戒&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;穿越火线&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;劲舞团&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;超级玛丽&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                },</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">父组件中：</span></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#22863A;">Category</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;template scope=&quot;scopeData&quot;&gt;</span></span>
<span class="line"><span style="color:#24292E;">				&lt;!-- 生成的是ul列表 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">				&lt;ul&gt;</span></span>
<span class="line"><span style="color:#24292E;">					&lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;{{g}}&lt;/li&gt;</span></span>
<span class="line"><span style="color:#24292E;">				&lt;/ul&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;/template&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;/</span><span style="color:#22863A;">Category</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">		&lt;</span><span style="color:#22863A;">Category</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;template slot-scope=&quot;scopeData&quot;&gt;</span></span>
<span class="line"><span style="color:#24292E;">				&lt;!-- 生成的是h4标题 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">				&lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;{{g}}&lt;/h4&gt;</span></span>
<span class="line"><span style="color:#24292E;">			&lt;/template&gt;</span></span>
<span class="line"><span style="color:#24292E;">		&lt;/</span><span style="color:#22863A;">Category</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">子组件中：</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                &lt;</span><span style="color:#22863A;">slot</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:games</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;games&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">slot</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                name:</span><span style="color:#032F62;">&#39;Category&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                props:[</span><span style="color:#032F62;">&#39;title&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//数据在子组件自身</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">data</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                        games:[</span><span style="color:#032F62;">&#39;红色警戒&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;穿越火线&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;劲舞团&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;超级玛丽&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                },</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div></li></ol></li></ol></li></ol><h2 id="二、vuex" tabindex="-1">二、Vuex <a class="header-anchor" href="#二、vuex" aria-label="Permalink to &quot;二、Vuex&quot;">​</a></h2><h2 id="_1-概念" tabindex="-1">1. 概念 <a class="header-anchor" href="#_1-概念" aria-label="Permalink to &quot;1. 概念&quot;">​</a></h2><p>​ 在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><h2 id="_2-何时使用" tabindex="-1">2. 何时使用？ <a class="header-anchor" href="#_2-何时使用" aria-label="Permalink to &quot;2. 何时使用？&quot;">​</a></h2><p>​ 多个组件需要共享数据时</p><h2 id="_3-搭建vuex环境" tabindex="-1">3. 搭建vuex环境 <a class="header-anchor" href="#_3-搭建vuex环境" aria-label="Permalink to &quot;3. 搭建vuex环境&quot;">​</a></h2><ol><li><p>创建文件：<code>src/store/index.js</code></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//引入Vue核心库</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Vue </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//引入Vuex</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Vuex </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vuex&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//应用Vuex插件</span></span>
<span class="line"><span style="color:#E1E4E8;">Vue.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(Vuex)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//准备actions对象——响应组件中用户的动作</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">actions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#6A737D;">//准备mutations对象——修改state中的数据</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mutations</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#6A737D;">//准备state对象——保存具体的数据</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//创建并暴露store</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Vuex.</span><span style="color:#B392F0;">Store</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">	actions,</span></span>
<span class="line"><span style="color:#E1E4E8;">	mutations,</span></span>
<span class="line"><span style="color:#E1E4E8;">	state</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//引入Vue核心库</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Vue </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//引入Vuex</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Vuex </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vuex&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//应用Vuex插件</span></span>
<span class="line"><span style="color:#24292E;">Vue.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(Vuex)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//准备actions对象——响应组件中用户的动作</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">actions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#6A737D;">//准备mutations对象——修改state中的数据</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mutations</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#6A737D;">//准备state对象——保存具体的数据</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//创建并暴露store</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Vuex.</span><span style="color:#6F42C1;">Store</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">	actions,</span></span>
<span class="line"><span style="color:#24292E;">	mutations,</span></span>
<span class="line"><span style="color:#24292E;">	state</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">......</span></span>
<span class="line"><span style="color:#6A737D;">//引入store</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> store </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./store&#39;</span></span>
<span class="line"><span style="color:#F97583;">......</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//创建vm</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vue</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">	el:</span><span style="color:#9ECBFF;">&#39;#app&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">h</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(App),</span></span>
<span class="line"><span style="color:#E1E4E8;">	store</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">......</span></span>
<span class="line"><span style="color:#6A737D;">//引入store</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> store </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./store&#39;</span></span>
<span class="line"><span style="color:#D73A49;">......</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//创建vm</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vue</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">	el:</span><span style="color:#032F62;">&#39;#app&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">: </span><span style="color:#E36209;">h</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">h</span><span style="color:#24292E;">(App),</span></span>
<span class="line"><span style="color:#24292E;">	store</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ol><h2 id="_4-基本使用" tabindex="-1">4. 基本使用 <a class="header-anchor" href="#_4-基本使用" aria-label="Permalink to &quot;4. 基本使用&quot;">​</a></h2><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//引入Vue核心库</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Vue </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//引入Vuex</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Vuex </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vuex&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//引用Vuex</span></span>
<span class="line"><span style="color:#E1E4E8;">Vue.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(Vuex)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">actions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//响应组件中加的动作</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">jia</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// console.log(&#39;actions中的jia被调用了&#39;,miniStore,value)</span></span>
<span class="line"><span style="color:#E1E4E8;">		context.</span><span style="color:#B392F0;">commit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;JIA&#39;</span><span style="color:#E1E4E8;">,value)</span></span>
<span class="line"><span style="color:#E1E4E8;">	},</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mutations</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//执行加</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">JIA</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">state</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// console.log(&#39;mutations中的JIA被调用了&#39;,state,value)</span></span>
<span class="line"><span style="color:#E1E4E8;">		state.sum </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> value</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//初始化数据</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   sum:</span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//创建并暴露store</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Vuex.</span><span style="color:#B392F0;">Store</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">	actions,</span></span>
<span class="line"><span style="color:#E1E4E8;">	mutations,</span></span>
<span class="line"><span style="color:#E1E4E8;">	state,</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//引入Vue核心库</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Vue </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//引入Vuex</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Vuex </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vuex&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//引用Vuex</span></span>
<span class="line"><span style="color:#24292E;">Vue.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(Vuex)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">actions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//响应组件中加的动作</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">jia</span><span style="color:#24292E;">(</span><span style="color:#E36209;">context</span><span style="color:#24292E;">,</span><span style="color:#E36209;">value</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// console.log(&#39;actions中的jia被调用了&#39;,miniStore,value)</span></span>
<span class="line"><span style="color:#24292E;">		context.</span><span style="color:#6F42C1;">commit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;JIA&#39;</span><span style="color:#24292E;">,value)</span></span>
<span class="line"><span style="color:#24292E;">	},</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mutations</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//执行加</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">JIA</span><span style="color:#24292E;">(</span><span style="color:#E36209;">state</span><span style="color:#24292E;">,</span><span style="color:#E36209;">value</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// console.log(&#39;mutations中的JIA被调用了&#39;,state,value)</span></span>
<span class="line"><span style="color:#24292E;">		state.sum </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> value</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//初始化数据</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   sum:</span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//创建并暴露store</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Vuex.</span><span style="color:#6F42C1;">Store</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">	actions,</span></span>
<span class="line"><span style="color:#24292E;">	mutations,</span></span>
<span class="line"><span style="color:#24292E;">	state,</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p>备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h2 id="_5-getters的使用" tabindex="-1">5. getters的使用 <a class="header-anchor" href="#_5-getters的使用" aria-label="Permalink to &quot;5. getters的使用&quot;">​</a></h2><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">......</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getters</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">bigSum</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">state</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> state.sum </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//创建并暴露store</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Vuex.</span><span style="color:#B392F0;">Store</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">......</span></span>
<span class="line"><span style="color:#E1E4E8;">	getters</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">......</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getters</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">bigSum</span><span style="color:#24292E;">(</span><span style="color:#E36209;">state</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> state.sum </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//创建并暴露store</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Vuex.</span><span style="color:#6F42C1;">Store</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">......</span></span>
<span class="line"><span style="color:#24292E;">	getters</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h2 id="_6-四个map方法的使用" tabindex="-1">6. 四个map方法的使用 <a class="header-anchor" href="#_6-四个map方法的使用" aria-label="Permalink to &quot;6. 四个map方法的使用&quot;">​</a></h2><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">computed</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">mapState</span><span style="color:#E1E4E8;">({sum:</span><span style="color:#9ECBFF;">&#39;sum&#39;</span><span style="color:#E1E4E8;">,school:</span><span style="color:#9ECBFF;">&#39;school&#39;</span><span style="color:#E1E4E8;">,subject:</span><span style="color:#9ECBFF;">&#39;subject&#39;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">mapState</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;sum&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;school&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;subject&#39;</span><span style="color:#E1E4E8;">]),</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">computed</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">mapState</span><span style="color:#24292E;">({sum:</span><span style="color:#032F62;">&#39;sum&#39;</span><span style="color:#24292E;">,school:</span><span style="color:#032F62;">&#39;school&#39;</span><span style="color:#24292E;">,subject:</span><span style="color:#032F62;">&#39;subject&#39;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">         </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">mapState</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;sum&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;school&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;subject&#39;</span><span style="color:#24292E;">]),</span></span>
<span class="line"><span style="color:#24292E;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">computed</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">mapGetters</span><span style="color:#E1E4E8;">({bigSum:</span><span style="color:#9ECBFF;">&#39;bigSum&#39;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">mapGetters</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;bigSum&#39;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">computed</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">mapGetters</span><span style="color:#24292E;">({bigSum:</span><span style="color:#032F62;">&#39;bigSum&#39;</span><span style="color:#24292E;">}),</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">mapGetters</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;bigSum&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">methods</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">mapActions</span><span style="color:#E1E4E8;">({incrementOdd:</span><span style="color:#9ECBFF;">&#39;jiaOdd&#39;</span><span style="color:#E1E4E8;">,incrementWait:</span><span style="color:#9ECBFF;">&#39;jiaWait&#39;</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">mapActions</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;jiaOdd&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;jiaWait&#39;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">methods</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">mapActions</span><span style="color:#24292E;">({incrementOdd:</span><span style="color:#032F62;">&#39;jiaOdd&#39;</span><span style="color:#24292E;">,incrementWait:</span><span style="color:#032F62;">&#39;jiaWait&#39;</span><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">mapActions</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;jiaOdd&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;jiaWait&#39;</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">methods</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//靠mapActions生成：increment、decrement（对象形式）</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">mapMutations</span><span style="color:#E1E4E8;">({increment:</span><span style="color:#9ECBFF;">&#39;JIA&#39;</span><span style="color:#E1E4E8;">,decrement:</span><span style="color:#9ECBFF;">&#39;JIAN&#39;</span><span style="color:#E1E4E8;">}),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">mapMutations</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;JIA&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;JIAN&#39;</span><span style="color:#E1E4E8;">]),</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">methods</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//靠mapActions生成：increment、decrement（对象形式）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">mapMutations</span><span style="color:#24292E;">({increment:</span><span style="color:#032F62;">&#39;JIA&#39;</span><span style="color:#24292E;">,decrement:</span><span style="color:#032F62;">&#39;JIAN&#39;</span><span style="color:#24292E;">}),</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">mapMutations</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;JIA&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;JIAN&#39;</span><span style="color:#24292E;">]),</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h2 id="_7-模块化-命名空间" tabindex="-1">7. 模块化+命名空间 <a class="header-anchor" href="#_7-模块化-命名空间" aria-label="Permalink to &quot;7. 模块化+命名空间&quot;">​</a></h2><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">countAbout</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  namespaced:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">//开启命名空间</span></span>
<span class="line"><span style="color:#E1E4E8;">  state:{x:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">  mutations: { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  actions: { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  getters: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">bigSum</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">state</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> state.sum </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">personAbout</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  namespaced:</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">//开启命名空间</span></span>
<span class="line"><span style="color:#E1E4E8;">  state:{ </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  mutations: { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  actions: { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">store</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Vuex.</span><span style="color:#B392F0;">Store</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  modules: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    countAbout,</span></span>
<span class="line"><span style="color:#E1E4E8;">    personAbout</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">countAbout</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  namespaced:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">//开启命名空间</span></span>
<span class="line"><span style="color:#24292E;">  state:{x:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">  mutations: { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  actions: { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  getters: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">bigSum</span><span style="color:#24292E;">(</span><span style="color:#E36209;">state</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> state.sum </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">personAbout</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  namespaced:</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">//开启命名空间</span></span>
<span class="line"><span style="color:#24292E;">  state:{ </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  mutations: { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  actions: { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">store</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Vuex.</span><span style="color:#6F42C1;">Store</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  modules: {</span></span>
<span class="line"><span style="color:#24292E;">    countAbout,</span></span>
<span class="line"><span style="color:#24292E;">    personAbout</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div></li><li><p>开启命名空间后，组件中读取state数据：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//方式一：自己直接读取</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$store.state.personAbout.list</span></span>
<span class="line"><span style="color:#6A737D;">//方式二：借助mapState读取：</span></span>
<span class="line"><span style="color:#F97583;">...</span><span style="color:#B392F0;">mapState</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;countAbout&#39;</span><span style="color:#E1E4E8;">,[</span><span style="color:#9ECBFF;">&#39;sum&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;school&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;subject&#39;</span><span style="color:#E1E4E8;">]),</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//方式一：自己直接读取</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$store.state.personAbout.list</span></span>
<span class="line"><span style="color:#6A737D;">//方式二：借助mapState读取：</span></span>
<span class="line"><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">mapState</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;countAbout&#39;</span><span style="color:#24292E;">,[</span><span style="color:#032F62;">&#39;sum&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;school&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;subject&#39;</span><span style="color:#24292E;">]),</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>开启命名空间后，组件中读取getters数据：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//方式一：自己直接读取</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$store.getters[</span><span style="color:#9ECBFF;">&#39;personAbout/firstPersonName&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#6A737D;">//方式二：借助mapGetters读取：</span></span>
<span class="line"><span style="color:#F97583;">...</span><span style="color:#B392F0;">mapGetters</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;countAbout&#39;</span><span style="color:#E1E4E8;">,[</span><span style="color:#9ECBFF;">&#39;bigSum&#39;</span><span style="color:#E1E4E8;">])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//方式一：自己直接读取</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$store.getters[</span><span style="color:#032F62;">&#39;personAbout/firstPersonName&#39;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;">//方式二：借助mapGetters读取：</span></span>
<span class="line"><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">mapGetters</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;countAbout&#39;</span><span style="color:#24292E;">,[</span><span style="color:#032F62;">&#39;bigSum&#39;</span><span style="color:#24292E;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>开启命名空间后，组件中调用dispatch</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//方式一：自己直接dispatch</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$store.</span><span style="color:#B392F0;">dispatch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;personAbout/addPersonWang&#39;</span><span style="color:#E1E4E8;">,person)</span></span>
<span class="line"><span style="color:#6A737D;">//方式二：借助mapActions：</span></span>
<span class="line"><span style="color:#F97583;">...</span><span style="color:#B392F0;">mapActions</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;countAbout&#39;</span><span style="color:#E1E4E8;">,{incrementOdd:</span><span style="color:#9ECBFF;">&#39;jiaOdd&#39;</span><span style="color:#E1E4E8;">,incrementWait:</span><span style="color:#9ECBFF;">&#39;jiaWait&#39;</span><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//方式一：自己直接dispatch</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$store.</span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;personAbout/addPersonWang&#39;</span><span style="color:#24292E;">,person)</span></span>
<span class="line"><span style="color:#6A737D;">//方式二：借助mapActions：</span></span>
<span class="line"><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">mapActions</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;countAbout&#39;</span><span style="color:#24292E;">,{incrementOdd:</span><span style="color:#032F62;">&#39;jiaOdd&#39;</span><span style="color:#24292E;">,incrementWait:</span><span style="color:#032F62;">&#39;jiaWait&#39;</span><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>开启命名空间后，组件中调用commit</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//方式一：自己直接commit</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$store.</span><span style="color:#B392F0;">commit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;personAbout/ADD_PERSON&#39;</span><span style="color:#E1E4E8;">,person)</span></span>
<span class="line"><span style="color:#6A737D;">//方式二：借助mapMutations：</span></span>
<span class="line"><span style="color:#F97583;">...</span><span style="color:#B392F0;">mapMutations</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;countAbout&#39;</span><span style="color:#E1E4E8;">,{increment:</span><span style="color:#9ECBFF;">&#39;JIA&#39;</span><span style="color:#E1E4E8;">,decrement:</span><span style="color:#9ECBFF;">&#39;JIAN&#39;</span><span style="color:#E1E4E8;">}),</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//方式一：自己直接commit</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$store.</span><span style="color:#6F42C1;">commit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;personAbout/ADD_PERSON&#39;</span><span style="color:#24292E;">,person)</span></span>
<span class="line"><span style="color:#6A737D;">//方式二：借助mapMutations：</span></span>
<span class="line"><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">mapMutations</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;countAbout&#39;</span><span style="color:#24292E;">,{increment:</span><span style="color:#032F62;">&#39;JIA&#39;</span><span style="color:#24292E;">,decrement:</span><span style="color:#032F62;">&#39;JIAN&#39;</span><span style="color:#24292E;">}),</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ol><h2 id="三、路由" tabindex="-1">三、路由 <a class="header-anchor" href="#三、路由" aria-label="Permalink to &quot;三、路由&quot;">​</a></h2><ol><li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li><li>前端路由：key是路径，value是组件。</li></ol><h2 id="_1-基本使用" tabindex="-1">1. 基本使用 <a class="header-anchor" href="#_1-基本使用" aria-label="Permalink to &quot;1. 基本使用&quot;">​</a></h2><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项:</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//引入VueRouter</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> VueRouter </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue-router&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//引入Luyou 组件</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> About </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;../components/About&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Home </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;../components/Home&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//创建router实例对象，去管理一组一组的路由规则</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">router</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VueRouter</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">	routes:[</span></span>
<span class="line"><span style="color:#E1E4E8;">		{</span></span>
<span class="line"><span style="color:#E1E4E8;">			path:</span><span style="color:#9ECBFF;">&#39;/about&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			component:About</span></span>
<span class="line"><span style="color:#E1E4E8;">		},</span></span>
<span class="line"><span style="color:#E1E4E8;">		{</span></span>
<span class="line"><span style="color:#E1E4E8;">			path:</span><span style="color:#9ECBFF;">&#39;/home&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			component:Home</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	]</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//暴露router</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> router</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//引入VueRouter</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> VueRouter </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue-router&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//引入Luyou 组件</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> About </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../components/About&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Home </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../components/Home&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//创建router实例对象，去管理一组一组的路由规则</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">router</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">VueRouter</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">	routes:[</span></span>
<span class="line"><span style="color:#24292E;">		{</span></span>
<span class="line"><span style="color:#24292E;">			path:</span><span style="color:#032F62;">&#39;/about&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">			component:About</span></span>
<span class="line"><span style="color:#24292E;">		},</span></span>
<span class="line"><span style="color:#24292E;">		{</span></span>
<span class="line"><span style="color:#24292E;">			path:</span><span style="color:#032F62;">&#39;/home&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">			component:Home</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	]</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//暴露router</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> router</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div></li><li><p>实现切换（active-class可配置高亮样式）</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">router-link</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">active-class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;active&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;/about&quot;</span><span style="color:#E1E4E8;">&gt;About&lt;/</span><span style="color:#85E89D;">router-link</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">router-link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">active-class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;active&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">to</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;/about&quot;</span><span style="color:#24292E;">&gt;About&lt;/</span><span style="color:#22863A;">router-link</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>指定展示位置</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">router-view</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">router-view</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">router-view</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">router-view</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><h2 id="_2-几个注意点" tabindex="-1">2. 几个注意点 <a class="header-anchor" href="#_2-几个注意点" aria-label="Permalink to &quot;2. 几个注意点&quot;">​</a></h2><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li></ol><h2 id="_3-多级路由-多级路由" tabindex="-1">3. 多级路由（多级路由） <a class="header-anchor" href="#_3-多级路由-多级路由" aria-label="Permalink to &quot;3. 多级路由（多级路由）&quot;">​</a></h2><ol><li><p>配置路由规则，使用children配置项：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">routes</span><span style="color:#E1E4E8;">:[</span></span>
<span class="line"><span style="color:#E1E4E8;">	{</span></span>
<span class="line"><span style="color:#E1E4E8;">		path:</span><span style="color:#9ECBFF;">&#39;/about&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		component:About,</span></span>
<span class="line"><span style="color:#E1E4E8;">	},</span></span>
<span class="line"><span style="color:#E1E4E8;">	{</span></span>
<span class="line"><span style="color:#E1E4E8;">		path:</span><span style="color:#9ECBFF;">&#39;/home&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		component:Home,</span></span>
<span class="line"><span style="color:#E1E4E8;">		children:[ </span><span style="color:#6A737D;">//通过children配置子级路由</span></span>
<span class="line"><span style="color:#E1E4E8;">			{</span></span>
<span class="line"><span style="color:#E1E4E8;">				path:</span><span style="color:#9ECBFF;">&#39;news&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//此处一定不要写：/news</span></span>
<span class="line"><span style="color:#E1E4E8;">				component:News</span></span>
<span class="line"><span style="color:#E1E4E8;">			},</span></span>
<span class="line"><span style="color:#E1E4E8;">			{</span></span>
<span class="line"><span style="color:#E1E4E8;">				path:</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">//此处一定不要写：/message</span></span>
<span class="line"><span style="color:#E1E4E8;">				component:Message</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">//路由懒加载</span></span>
<span class="line"><span style="color:#E1E4E8;">                component:() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@/message&#39;</span><span style="color:#E1E4E8;">) </span></span>
<span class="line"><span style="color:#E1E4E8;">			}</span></span>
<span class="line"><span style="color:#E1E4E8;">		]</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">routes</span><span style="color:#24292E;">:[</span></span>
<span class="line"><span style="color:#24292E;">	{</span></span>
<span class="line"><span style="color:#24292E;">		path:</span><span style="color:#032F62;">&#39;/about&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		component:About,</span></span>
<span class="line"><span style="color:#24292E;">	},</span></span>
<span class="line"><span style="color:#24292E;">	{</span></span>
<span class="line"><span style="color:#24292E;">		path:</span><span style="color:#032F62;">&#39;/home&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		component:Home,</span></span>
<span class="line"><span style="color:#24292E;">		children:[ </span><span style="color:#6A737D;">//通过children配置子级路由</span></span>
<span class="line"><span style="color:#24292E;">			{</span></span>
<span class="line"><span style="color:#24292E;">				path:</span><span style="color:#032F62;">&#39;news&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//此处一定不要写：/news</span></span>
<span class="line"><span style="color:#24292E;">				component:News</span></span>
<span class="line"><span style="color:#24292E;">			},</span></span>
<span class="line"><span style="color:#24292E;">			{</span></span>
<span class="line"><span style="color:#24292E;">				path:</span><span style="color:#032F62;">&#39;message&#39;</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">//此处一定不要写：/message</span></span>
<span class="line"><span style="color:#24292E;">				component:Message</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">//路由懒加载</span></span>
<span class="line"><span style="color:#24292E;">                component:() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;@/message&#39;</span><span style="color:#24292E;">) </span></span>
<span class="line"><span style="color:#24292E;">			}</span></span>
<span class="line"><span style="color:#24292E;">		]</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div></li><li><p>跳转（要写完整路径）：</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">router-link</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;/home/news&quot;</span><span style="color:#E1E4E8;">&gt;News&lt;/</span><span style="color:#85E89D;">router-link</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">router-link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">to</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;/home/news&quot;</span><span style="color:#24292E;">&gt;News&lt;/</span><span style="color:#22863A;">router-link</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><h2 id="_4-路由的query参数" tabindex="-1">4. 路由的query参数 <a class="header-anchor" href="#_4-路由的query参数" aria-label="Permalink to &quot;4. 路由的query参数&quot;">​</a></h2><ol><li><p>传递参数</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">router-link</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">home</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">message</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">detail</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">id</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">666</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">title</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">你好</span><span style="color:#9ECBFF;">&quot;&gt;跳转&lt;/router-link</span><span style="color:#FDAEB7;font-style:italic;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span></span>
<span class="line"><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 跳转并携带query参数，to的对象写法 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">router</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">link </span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">to</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">path:</span><span style="color:#FDAEB7;font-style:italic;">&#39;/home/message/detail&#39;,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">query:{</span></span>
<span class="line"><span style="color:#E1E4E8;">		   </span><span style="color:#B392F0;">id:666,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">title:</span><span style="color:#FDAEB7;font-style:italic;">&#39;你好&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">}</span><span style="color:#FDAEB7;font-style:italic;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">&gt;跳转&lt;/</span><span style="color:#85E89D;">router-link</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">router-link</span><span style="color:#24292E;"> :</span><span style="color:#6F42C1;">to</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">home</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">message</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">detail</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">id</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">666</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">title</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">你好</span><span style="color:#032F62;">&quot;&gt;跳转&lt;/router-link</span><span style="color:#B31D28;font-style:italic;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">				</span></span>
<span class="line"><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 跳转并携带query参数，to的对象写法 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">router</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">link </span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">to</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">path:</span><span style="color:#B31D28;font-style:italic;">&#39;/home/message/detail&#39;,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">query:{</span></span>
<span class="line"><span style="color:#24292E;">		   </span><span style="color:#6F42C1;">id:666,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">title:</span><span style="color:#B31D28;font-style:italic;">&#39;你好&#39;</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">}</span><span style="color:#B31D28;font-style:italic;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">&gt;跳转&lt;/</span><span style="color:#22863A;">router-link</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>接收参数：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$route.query.id</span></span>
<span class="line"><span style="color:#E1E4E8;">$route.query.title</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$route.query.id</span></span>
<span class="line"><span style="color:#24292E;">$route.query.title</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ol><h2 id="_5-命名路由" tabindex="-1">5. 命名路由 <a class="header-anchor" href="#_5-命名路由" aria-label="Permalink to &quot;5. 命名路由&quot;">​</a></h2><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">path</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&#39;/demo&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">:Demo,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">children</span><span style="color:#E1E4E8;">:[</span></span>
<span class="line"><span style="color:#E1E4E8;">		{</span></span>
<span class="line"><span style="color:#E1E4E8;">			path:</span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			component:Test,</span></span>
<span class="line"><span style="color:#E1E4E8;">			children:[</span></span>
<span class="line"><span style="color:#E1E4E8;">				{</span></span>
<span class="line"><span style="color:#E1E4E8;">                      name:</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">//给路由命名</span></span>
<span class="line"><span style="color:#E1E4E8;">					path:</span><span style="color:#9ECBFF;">&#39;welcome&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">					component:Hello,</span></span>
<span class="line"><span style="color:#E1E4E8;">				}</span></span>
<span class="line"><span style="color:#E1E4E8;">			]</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">path</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;/demo&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">:Demo,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">children</span><span style="color:#24292E;">:[</span></span>
<span class="line"><span style="color:#24292E;">		{</span></span>
<span class="line"><span style="color:#24292E;">			path:</span><span style="color:#032F62;">&#39;test&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">			component:Test,</span></span>
<span class="line"><span style="color:#24292E;">			children:[</span></span>
<span class="line"><span style="color:#24292E;">				{</span></span>
<span class="line"><span style="color:#24292E;">                      name:</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">//给路由命名</span></span>
<span class="line"><span style="color:#24292E;">					path:</span><span style="color:#032F62;">&#39;welcome&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">					component:Hello,</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			]</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></li><li><p>简化跳转：</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!--简化前，需要写完整的路径 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">router-link</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;/demo/test/welcome&quot;</span><span style="color:#E1E4E8;">&gt;跳转&lt;/</span><span style="color:#85E89D;">router-link</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!--简化后，直接通过名字跳转 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">router-link</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">{</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">}</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;跳转&lt;/</span><span style="color:#85E89D;">router-link</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!--简化写法配合传递参数 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">router-link</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	:</span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">query</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">		   </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">666</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">title</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&#39;你好&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">&gt;跳转&lt;/</span><span style="color:#85E89D;">router-link</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!--简化前，需要写完整的路径 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">router-link</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">to</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;/demo/test/welcome&quot;</span><span style="color:#24292E;">&gt;跳转&lt;/</span><span style="color:#22863A;">router-link</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!--简化后，直接通过名字跳转 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">router-link</span><span style="color:#24292E;"> :</span><span style="color:#6F42C1;">to</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">{</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">}</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">&gt;跳转&lt;/</span><span style="color:#22863A;">router-link</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!--简化写法配合传递参数 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">router-link</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	:</span><span style="color:#6F42C1;">to</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;hello&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">query</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">		   </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">666</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">title</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;你好&#39;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">&gt;跳转&lt;/</span><span style="color:#22863A;">router-link</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li></ol></li></ol><h2 id="_6-路由的params参数" tabindex="-1">6. 路由的params参数 <a class="header-anchor" href="#_6-路由的params参数" aria-label="Permalink to &quot;6. 路由的params参数&quot;">​</a></h2><ol><li><p>配置路由，声明接收params参数</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">path</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&#39;/home&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">:Home,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">children</span><span style="color:#E1E4E8;">:[</span></span>
<span class="line"><span style="color:#E1E4E8;">		{</span></span>
<span class="line"><span style="color:#E1E4E8;">			path:</span><span style="color:#9ECBFF;">&#39;news&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">			component:News</span></span>
<span class="line"><span style="color:#E1E4E8;">		},</span></span>
<span class="line"><span style="color:#E1E4E8;">		{</span></span>
<span class="line"><span style="color:#E1E4E8;">			component:Message,</span></span>
<span class="line"><span style="color:#E1E4E8;">			children:[</span></span>
<span class="line"><span style="color:#E1E4E8;">				{</span></span>
<span class="line"><span style="color:#E1E4E8;">					name:</span><span style="color:#9ECBFF;">&#39;xiangqing&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">					path:</span><span style="color:#9ECBFF;">&#39;detail/:id/:title&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//使用占位符声明接收params参数</span></span>
<span class="line"><span style="color:#E1E4E8;">					component:Detail</span></span>
<span class="line"><span style="color:#E1E4E8;">				}</span></span>
<span class="line"><span style="color:#E1E4E8;">			]</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">path</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;/home&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">:Home,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">children</span><span style="color:#24292E;">:[</span></span>
<span class="line"><span style="color:#24292E;">		{</span></span>
<span class="line"><span style="color:#24292E;">			path:</span><span style="color:#032F62;">&#39;news&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">			component:News</span></span>
<span class="line"><span style="color:#24292E;">		},</span></span>
<span class="line"><span style="color:#24292E;">		{</span></span>
<span class="line"><span style="color:#24292E;">			component:Message,</span></span>
<span class="line"><span style="color:#24292E;">			children:[</span></span>
<span class="line"><span style="color:#24292E;">				{</span></span>
<span class="line"><span style="color:#24292E;">					name:</span><span style="color:#032F62;">&#39;xiangqing&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">					path:</span><span style="color:#032F62;">&#39;detail/:id/:title&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//使用占位符声明接收params参数</span></span>
<span class="line"><span style="color:#24292E;">					component:Detail</span></span>
<span class="line"><span style="color:#24292E;">				}</span></span>
<span class="line"><span style="color:#24292E;">			]</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div></li><li><p>传递参数</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">router-link</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">home</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">message</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">detail</span><span style="color:#F97583;">/</span><span style="color:#79B8FF;">666</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">你好</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;跳转&lt;/</span><span style="color:#85E89D;">router-link</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">				</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">router-link</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">	:</span><span style="color:#B392F0;">to</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&#39;xiangqing&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">params</span><span style="color:#E1E4E8;">:{</span></span>
<span class="line"><span style="color:#E1E4E8;">		   </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">:</span><span style="color:#79B8FF;">666</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">title</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&#39;你好&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">&gt;跳转&lt;/</span><span style="color:#85E89D;">router-link</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">router-link</span><span style="color:#24292E;"> :</span><span style="color:#6F42C1;">to</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">home</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">message</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">detail</span><span style="color:#D73A49;">/</span><span style="color:#005CC5;">666</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">你好</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">&gt;跳转&lt;/</span><span style="color:#22863A;">router-link</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">				</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">router-link</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">	:</span><span style="color:#6F42C1;">to</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;xiangqing&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">params</span><span style="color:#24292E;">:{</span></span>
<span class="line"><span style="color:#24292E;">		   </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">:</span><span style="color:#005CC5;">666</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">title</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;你好&#39;</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">&gt;跳转&lt;/</span><span style="color:#22863A;">router-link</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote></li><li><p>接收参数：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">$route.params.id</span></span>
<span class="line"><span style="color:#E1E4E8;">$route.params.title</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">$route.params.id</span></span>
<span class="line"><span style="color:#24292E;">$route.params.title</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ol><h2 id="_7-路由的props配置" tabindex="-1">7.路由的props配置 <a class="header-anchor" href="#_7-路由的props配置" aria-label="Permalink to &quot;7.路由的props配置&quot;">​</a></h2><p>​ 作用：让路由组件更方便的收到参数</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&#39;xiangqing&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">path</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&#39;detail/:id&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">:Detail,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// props:{a:900}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// props:true</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">props</span><span style="color:#E1E4E8;">(route){</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			id:route.query.id,</span></span>
<span class="line"><span style="color:#E1E4E8;">			title:route.query.title</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;xiangqing&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">path</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;detail/:id&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">component</span><span style="color:#24292E;">:Detail,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// props:{a:900}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// props:true</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">props</span><span style="color:#24292E;">(route){</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			id:route.query.id,</span></span>
<span class="line"><span style="color:#24292E;">			title:route.query.title</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="_8-router-link-的replace属性" tabindex="-1">8. <code>&lt;router-link&gt;</code>的replace属性 <a class="header-anchor" href="#_8-router-link-的replace属性" aria-label="Permalink to &quot;8. \`\`\`&lt;router-link&gt;\`\`\`的replace属性&quot;">​</a></h2><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h2 id="_9-编程式路由导航" tabindex="-1">9. 编程式路由导航 <a class="header-anchor" href="#_9-编程式路由导航" aria-label="Permalink to &quot;9. 编程式路由导航&quot;">​</a></h2><ol><li><p>作用：不借助<code>&lt;router-link&gt; </code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//$router的两个API</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$router.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">	name:</span><span style="color:#9ECBFF;">&#39;xiangqing&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		params:{</span></span>
<span class="line"><span style="color:#E1E4E8;">			id:xxx,</span></span>
<span class="line"><span style="color:#E1E4E8;">			title:xxx</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$router.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">	name:</span><span style="color:#9ECBFF;">&#39;xiangqing&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		params:{</span></span>
<span class="line"><span style="color:#E1E4E8;">			id:xxx,</span></span>
<span class="line"><span style="color:#E1E4E8;">			title:xxx</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$router.</span><span style="color:#B392F0;">forward</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//前进</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$router.</span><span style="color:#B392F0;">back</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//后退</span></span>
<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$router.</span><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//可前进也可后退</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//$router的两个API</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$router.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">	name:</span><span style="color:#032F62;">&#39;xiangqing&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		params:{</span></span>
<span class="line"><span style="color:#24292E;">			id:xxx,</span></span>
<span class="line"><span style="color:#24292E;">			title:xxx</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$router.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">	name:</span><span style="color:#032F62;">&#39;xiangqing&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		params:{</span></span>
<span class="line"><span style="color:#24292E;">			id:xxx,</span></span>
<span class="line"><span style="color:#24292E;">			title:xxx</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$router.</span><span style="color:#6F42C1;">forward</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">//前进</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$router.</span><span style="color:#6F42C1;">back</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">//后退</span></span>
<span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$router.</span><span style="color:#6F42C1;">go</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">//可前进也可后退</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div></li></ol><h2 id="_10-缓存路由组件" tabindex="-1">10. 缓存路由组件 <a class="header-anchor" href="#_10-缓存路由组件" aria-label="Permalink to &quot;10. 缓存路由组件&quot;">​</a></h2><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p></li><li><p>具体编码：</p><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">keep-alive</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">include</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;News&quot;</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;router-view&gt;&lt;/router-view&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">keep-alive</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">keep-alive</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">include</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;News&quot;</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;router-view&gt;&lt;/router-view&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">keep-alive</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><h2 id="_11-两个新的生命周期钩子" tabindex="-1">11. 两个新的生命周期钩子 <a class="header-anchor" href="#_11-两个新的生命周期钩子" aria-label="Permalink to &quot;11. 两个新的生命周期钩子&quot;">​</a></h2><ol><li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li><li>具体名字： <ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li></ol></li></ol><h2 id="_12-路由守卫" tabindex="-1">12. 路由守卫 <a class="header-anchor" href="#_12-路由守卫" aria-label="Permalink to &quot;12. 路由守卫&quot;">​</a></h2><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p>全局守卫:</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span>
<span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#B392F0;">beforeEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">to</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">from</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">next</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;beforeEach&#39;</span><span style="color:#E1E4E8;">,to,from)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(to.meta.isAuth){ </span><span style="color:#6A737D;">//判断当前路由是否需要进行权限控制</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(localStorage.</span><span style="color:#B392F0;">getItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;school&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;atguigu&#39;</span><span style="color:#E1E4E8;">){ </span><span style="color:#6A737D;">//权限控制的具体规则</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//放行</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;暂无权限查看&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// next({name:&#39;guanyu&#39;})</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">//放行</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span>
<span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#B392F0;">afterEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">to</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">from</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">	console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;afterEach&#39;</span><span style="color:#E1E4E8;">,to,from)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(to.meta.title){ </span></span>
<span class="line"><span style="color:#E1E4E8;">		document.title </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> to.meta.title </span><span style="color:#6A737D;">//修改网页的title</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		document.title </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vue_test&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">beforeEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">to</span><span style="color:#24292E;">,</span><span style="color:#E36209;">from</span><span style="color:#24292E;">,</span><span style="color:#E36209;">next</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;beforeEach&#39;</span><span style="color:#24292E;">,to,from)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(to.meta.isAuth){ </span><span style="color:#6A737D;">//判断当前路由是否需要进行权限控制</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(localStorage.</span><span style="color:#6F42C1;">getItem</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;school&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;atguigu&#39;</span><span style="color:#24292E;">){ </span><span style="color:#6A737D;">//权限控制的具体规则</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">//放行</span></span>
<span class="line"><span style="color:#24292E;">		}</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;暂无权限查看&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// next({name:&#39;guanyu&#39;})</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">//放行</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span>
<span class="line"><span style="color:#24292E;">router.</span><span style="color:#6F42C1;">afterEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">to</span><span style="color:#24292E;">,</span><span style="color:#E36209;">from</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">	console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;afterEach&#39;</span><span style="color:#24292E;">,to,from)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(to.meta.title){ </span></span>
<span class="line"><span style="color:#24292E;">		document.title </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> to.meta.title </span><span style="color:#6A737D;">//修改网页的title</span></span>
<span class="line"><span style="color:#24292E;">	}</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		document.title </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vue_test&#39;</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div></li><li><p>独享守卫:</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">beforeEnter</span><span style="color:#E1E4E8;">(to,from,next){</span></span>
<span class="line"><span style="color:#E1E4E8;">	console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;beforeEnter&#39;</span><span style="color:#E1E4E8;">,to,from)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(to.meta.isAuth){ </span><span style="color:#6A737D;">//判断当前路由是否需要进行权限控制</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(localStorage.</span><span style="color:#B392F0;">getItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;school&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;atguigu&#39;</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;暂无权限查看&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#6A737D;">// next({name:&#39;guanyu&#39;})</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">beforeEnter</span><span style="color:#24292E;">(to,from,next){</span></span>
<span class="line"><span style="color:#24292E;">	console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;beforeEnter&#39;</span><span style="color:#24292E;">,to,from)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(to.meta.isAuth){ </span><span style="color:#6A737D;">//判断当前路由是否需要进行权限控制</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(localStorage.</span><span style="color:#6F42C1;">getItem</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;school&#39;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;atguigu&#39;</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">		}</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;暂无权限查看&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#6A737D;">// next({name:&#39;guanyu&#39;})</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">	}</span><span style="color:#D73A49;">else</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>组件内守卫：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//进入守卫：通过路由规则，进入该组件时被调用</span></span>
<span class="line"><span style="color:#B392F0;">beforeRouteEnter</span><span style="color:#E1E4E8;"> (to, from, next) {</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#6A737D;">//离开守卫：通过路由规则，离开该组件时被调用</span></span>
<span class="line"><span style="color:#B392F0;">beforeRouteLeave</span><span style="color:#E1E4E8;"> (to, from, next) {</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//进入守卫：通过路由规则，进入该组件时被调用</span></span>
<span class="line"><span style="color:#6F42C1;">beforeRouteEnter</span><span style="color:#24292E;"> (to, from, next) {</span></span>
<span class="line"><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#6A737D;">//离开守卫：通过路由规则，离开该组件时被调用</span></span>
<span class="line"><span style="color:#6F42C1;">beforeRouteLeave</span><span style="color:#24292E;"> (to, from, next) {</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ol><h2 id="_13-路由器的两种工作模式" tabindex="-1">13. 路由器的两种工作模式 <a class="header-anchor" href="#_13-路由器的两种工作模式" aria-label="Permalink to &quot;13. 路由器的两种工作模式&quot;">​</a></h2><ol><li><p>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</p></li><li><p>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</p></li><li><p>hash模式：</p><ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li><p>history模式：</p><ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li></ol><h2 id="四、响应式原理" tabindex="-1">四、响应式原理 <a class="header-anchor" href="#四、响应式原理" aria-label="Permalink to &quot;四、响应式原理&quot;">​</a></h2><p>响应式：当数据发生变化，数据变，页面也变</p><ol><li>数据代理：将data数据代理到实例对象上（方便将来操作data数据） 遍历所有data数据，通过Object.defineProperty()方法 将data中数据定义在实例对象上 内部就是通过get定义属性读取的方法，实际读取的是原数据_data 内部就是通过set定义属性设置的方法，实际设置的是原数据_data</li><li>数据劫持 遍历所有data数据，进行重新定义，将其定义成响应式。 也是通过Object.defineProperty()方法，重新定义属性get和set 此时会通过闭包的方式保存了一个dep对象， get中将来通过dep就能建立dep和watcher的联系 set中将来通过dep就能通知所有watcher去更新用户界面</li><li>模板解析 将指令语法/插值语法编译解析 <ol><li>当解析插值语法或者指令的最后,会创建watcher实例,其中触发get方法用于收集所有的dep和watcher之间的关系</li></ol></li><li>将元素节点转换成文档碎片节点 fragment</li><li>编译模板</li></ol><pre><code>取出当前节点所有子节点。进行遍历
判断节点是元素节点还是文本节点
  如果是元素节点，要编译指令语法 
    取出当前元素所有属性
      判断属性是不是指令属性
        判断是事件指令 v-on
          给元素绑定事件，同时回调函数会通过bind方法强制改变this指向为vm
        判断是普通指令 
          就会相应的解析（v-text / v-html）
          最终会new Watcher()，new Watcher时就会建立起dep和watcher的联系（你中有我，我中有你，互相保存）
  如果是文本节点，要编译插值语法
    最终会给元素设置textContext，值为表达式对应的值

3. 将编译后的模板添加到（el元素中）页面中生效
</code></pre><p>将来当用户去更新data数据时，this.msg = &#39;xxx&#39; 此时先会触发 数据代理设置的属性的set方法，方法中实际上设置的是_data（原数据）的值 又会触发数据劫持属性的set方法，此时就会更新data数据，同时通过dep.notify() 通知所有当前保存的watcher去更新用户界面，从而达到响应式~</p><h2 id="五、-双向数据绑定原理" tabindex="-1">五、 双向数据绑定原理 <a class="header-anchor" href="#五、-双向数据绑定原理" aria-label="Permalink to &quot;五、 双向数据绑定原理&quot;">​</a></h2><p>是通过v-model来实现双向数据绑定原理</p><p>v-model会给元素绑定value属性(数据就从数据Model流向页面View)，和绑定input事件 当用户输入数据，会触发input事件，在input事件中会更新data数据（数据就从页面View流向数据Model）</p>`,97),o=[e];function t(c,r,i,E,y,u){return n(),a("div",null,o)}const m=s(p,[["render",t]]);export{d as __pageData,m as default};
