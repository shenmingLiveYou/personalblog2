import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.cfbd61a4.js";const p="/personalblog2/assets/redux.1936d3c8.png",e="/personalblog2/assets/有无状态管理对比.d4624947.png",o="/personalblog2/assets/flux.a9278a0a.png",r="/personalblog2/assets/redux-1.3f6d9c70.png",c="/personalblog2/assets/计数器案例.de20014d.gif",t="/personalblog2/assets/三个核心概念.33537037.png",E="/personalblog2/assets/react-redux.ab4ea745.png",i="/personalblog2/assets/react-redux1.fcbaca8e.jpg",v=JSON.parse('{"title":"redux","description":"","frontmatter":{},"headers":[],"relativePath":"pages/react/redux.md","filePath":"pages/react/redux.md","lastUpdated":null}'),y={name:"pages/react/redux.md"},u=l('<h1 id="redux" tabindex="-1">redux <a class="header-anchor" href="#redux" aria-label="Permalink to &quot;redux&quot;">​</a></h1><p>集中式状态管理工具</p><p><img src="'+p+'" alt="redux logo"></p><h2 id="起源" tabindex="-1">起源 <a class="header-anchor" href="#起源" aria-label="Permalink to &quot;起源&quot;">​</a></h2><p><img src="'+e+'" alt="状态管理"></p><p>2014年 Facebook 提出了 <a href="http://facebook.github.io/flux/" target="_blank" rel="noreferrer">Flux</a> 架构的概念，采用 单向数据流 思想。<br><img src="'+o+'" alt="Flux"></p><p>2015年，<a href="https://redux.js.org/" target="_blank" rel="noreferrer">Redux</a> 出现，`，很短时间内就成为了最热门的状态管理架构。</p><h2 id="redux-概述" tabindex="-1">Redux 概述 <a class="header-anchor" href="#redux-概述" aria-label="Permalink to &quot;Redux 概述&quot;">​</a></h2><ul><li><code>yarn add redux</code></li></ul><p><img src="'+r+'" alt="redux"></p><p>Redux 是 JavaScript 应用的可预测状态容器，用来集中管理状态。<br> 特点：集中管理、可预测、易于测试、易于调试、强大的中间件机制满足你所有需求。 注意：redux 是一个独立于 react 的库，可以配合任何 UI 库/框架来使用。</p><p><strong>redux的三大原则</strong></p><ol><li><p>单一数据源</p></li><li><p>State是只读的</p></li><li><p>使用纯函数来执行修改</p></li></ol><p><strong>什么情况下需要使用redux</strong></p><ol><li><p>总体原则: 大型项目状态管理复杂才用</p></li><li><p>某个组件的状态，需要共享</p></li><li><p>某个状态需要在任何地方都可以拿到</p></li><li><p>一个组件需要改变全局状态</p></li><li><p>一个组件需要改变另一个组件的状态</p></li></ol><h2 id="三个核心概念" tabindex="-1">三个核心概念 <a class="header-anchor" href="#三个核心概念" aria-label="Permalink to &quot;三个核心概念&quot;">​</a></h2><p>计数器案例：点击 +1 按钮，数值加1（React 关注 UI，Redux 关注 state）。<br> 计数器案例的 state： { count: 0 } 。<br><img src="'+c+'" alt="计数器"></p><ul><li>Action（“砖”家）：描述要执行的行为动作，比如要让计数器的值加1（提出想法）。</li><li>Reducer（劳动者）：接收 Action 完成该动作，比如完成值加1得到新状态 { count: 1 }（实现想法）。</li><li>Store（管理者）：是 Action 和 Reducer 的桥梁，将 Action 传递给 Reducer。</li></ul><p><img src="'+t+`" alt="redux三个核心"></p><h3 id="action" tabindex="-1">action <a class="header-anchor" href="#action" aria-label="Permalink to &quot;action&quot;">​</a></h3><ul><li>action 是一个原生 JavaScript 对象。</li><li>作用：描述要执行的行为动作，提供完成该动作需要的数据。比如：计数器案例 +1 就是一个动作</li><li>约定1：必须提供 type 属性，用于描述动作类型。</li><li>约定2：type 属性的值是字符串，约定使用全大写字母。</li><li>约定3：可以提供其他属性，提供完成该动作需要的数据。</li><li>简化操作：使用函数来创建 action，将该函数叫做 action creator。</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{ </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;INCREMENT&#39;</span><span style="color:#E1E4E8;">, }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// todo app，添加任务的action：</span></span>
<span class="line"><span style="color:#E1E4E8;">{ </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;ADD_TODO&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">text</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;学习Redux&#39;</span><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{ </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;INCREMENT&#39;</span><span style="color:#24292E;">, }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// todo app，添加任务的action：</span></span>
<span class="line"><span style="color:#24292E;">{ </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;ADD_TODO&#39;</span><span style="color:#24292E;">, </span><span style="color:#6F42C1;">text</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;学习Redux&#39;</span><span style="color:#24292E;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// action creator:</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ({ type: </span><span style="color:#9ECBFF;">&#39;INCREMENT&#39;</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#6A737D;">// 创建action</span></span>
<span class="line"><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// action creator:</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">increment</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({ type: </span><span style="color:#032F62;">&#39;INCREMENT&#39;</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#6A737D;">// 创建action</span></span>
<span class="line"><span style="color:#6F42C1;">increment</span><span style="color:#24292E;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="reducer" tabindex="-1">reducer <a class="header-anchor" href="#reducer" aria-label="Permalink to &quot;reducer&quot;">​</a></h3><ul><li>reducer 是一个函数。</li><li>作用：接收 action 和 state（初始 state）， 完成该行为动作，并返回新 state。</li><li>代码解释：(state, action) =&gt; newState。</li><li>约定：不要直接修改 state，而是，根据当前 state 得到新的 state。</li><li>注意：reducer 应该是一个纯函数（同样的输入，必定得到同样的输出），不要有修改参数、调用 Math.random() 等不纯的操作。</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">counter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">state</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">action</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (action.type) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;INCREMENT&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> state </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// state++ 表示直接修改当前 state</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:           </span><span style="color:#6A737D;">// 必须得有！默认返回当前 state</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> state</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">counter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">state</span><span style="color:#24292E;">, </span><span style="color:#E36209;">action</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (action.type) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;INCREMENT&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> state </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// state++ 表示直接修改当前 state</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:           </span><span style="color:#6A737D;">// 必须得有！默认返回当前 state</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> state</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="store" tabindex="-1">store <a class="header-anchor" href="#store" aria-label="Permalink to &quot;store&quot;">​</a></h3><ul><li>Redux 的 state 仓库。一个 redux 应用只有一个 store。</li><li>作用：将 action 和 reducer 组合到一起。</li><li>职责： <ul><li>1 提供整个应用的 state</li><li>2 提供 dispatch 方法，用来触发 action</li><li>3 提供 getState 方法，用来获取整个应用的 state</li><li>4 提供 subscribe 方法，监听 state 变化。</li></ul></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createStore } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;redux&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> counter </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./reducer&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 接收 reducer 作为参数，创建 store</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">store</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createStore</span><span style="color:#E1E4E8;">(counter)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createStore } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;redux&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> counter </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./reducer&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 接收 reducer 作为参数，创建 store</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">store</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createStore</span><span style="color:#24292E;">(counter)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">store.</span><span style="color:#B392F0;">getState</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 获取state</span></span>
<span class="line"><span style="color:#E1E4E8;">store.</span><span style="color:#B392F0;">dispatch</span><span style="color:#E1E4E8;">({}) </span><span style="color:#6A737D;">// 触发 action</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">unsubscribe</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> store.</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {}) </span><span style="color:#6A737D;">// 监听 state 变化</span></span>
<span class="line"><span style="color:#6A737D;">//调用unsubscribe()取消监听state变化</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">store.</span><span style="color:#6F42C1;">getState</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 获取state</span></span>
<span class="line"><span style="color:#24292E;">store.</span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">({}) </span><span style="color:#6A737D;">// 触发 action</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">unsubscribe</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> store.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {}) </span><span style="color:#6A737D;">// 监听 state 变化</span></span>
<span class="line"><span style="color:#6A737D;">//调用unsubscribe()取消监听state变化</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="redux的基本使用" tabindex="-1">redux的基本使用 <a class="header-anchor" href="#redux的基本使用" aria-label="Permalink to &quot;redux的基本使用&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 1.安装</span></span>
<span class="line"><span style="color:#E1E4E8;"> yarn add redux</span></span>
<span class="line"><span style="color:#6A737D;">// 2.在js文件中从redex包里面导入createStore函数</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createStore } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;redux&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//3. 创建store,将reducer传入到store中</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">store</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createStore</span><span style="color:#E1E4E8;">(reducer)</span></span>
<span class="line"><span style="color:#6A737D;">// 4. 定义redecer函数 </span></span>
<span class="line"><span style="color:#6A737D;">//	要接收两个参数: state, action</span></span>
<span class="line"><span style="color:#6A737D;">//  注意:在定义reducer的时候,通过es6语法设置默认值的方式,初始化state的值</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reducer</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">action</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (action.type) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;INCREMENT&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> state </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> state </span><span style="color:#6A737D;">//一定要写一个默认情况,返回原来的state</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 调用subscribe,监听state的变化 注意: 要在dispatch之前调用</span></span>
<span class="line"><span style="color:#E1E4E8;">store.</span><span style="color:#B392F0;">subscribe</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(store.</span><span style="color:#B392F0;">getState</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//console.log(store.getState()) //获取store中state的状态值</span></span>
<span class="line"><span style="color:#E1E4E8;">store.</span><span style="color:#B392F0;">dispatch</span><span style="color:#E1E4E8;">({ type: </span><span style="color:#9ECBFF;">&#39;INCREMENT&#39;</span><span style="color:#E1E4E8;"> }) </span><span style="color:#6A737D;">// 分发action</span></span>
<span class="line"><span style="color:#E1E4E8;">store.</span><span style="color:#B392F0;">dispatch</span><span style="color:#E1E4E8;">({ type: </span><span style="color:#9ECBFF;">&#39;INCREMENT&#39;</span><span style="color:#E1E4E8;"> }) </span><span style="color:#6A737D;">// 分发action</span></span>
<span class="line"><span style="color:#6A737D;">//console.log(store.getState())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1.安装</span></span>
<span class="line"><span style="color:#24292E;"> yarn add redux</span></span>
<span class="line"><span style="color:#6A737D;">// 2.在js文件中从redex包里面导入createStore函数</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createStore } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;redux&#39;</span></span>
<span class="line"><span style="color:#6A737D;">//3. 创建store,将reducer传入到store中</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">store</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createStore</span><span style="color:#24292E;">(reducer)</span></span>
<span class="line"><span style="color:#6A737D;">// 4. 定义redecer函数 </span></span>
<span class="line"><span style="color:#6A737D;">//	要接收两个参数: state, action</span></span>
<span class="line"><span style="color:#6A737D;">//  注意:在定义reducer的时候,通过es6语法设置默认值的方式,初始化state的值</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reducer</span><span style="color:#24292E;">(</span><span style="color:#E36209;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#E36209;">action</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (action.type) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;INCREMENT&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> state </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> state </span><span style="color:#6A737D;">//一定要写一个默认情况,返回原来的state</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 调用subscribe,监听state的变化 注意: 要在dispatch之前调用</span></span>
<span class="line"><span style="color:#24292E;">store.</span><span style="color:#6F42C1;">subscribe</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(store.</span><span style="color:#6F42C1;">getState</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//console.log(store.getState()) //获取store中state的状态值</span></span>
<span class="line"><span style="color:#24292E;">store.</span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">({ type: </span><span style="color:#032F62;">&#39;INCREMENT&#39;</span><span style="color:#24292E;"> }) </span><span style="color:#6A737D;">// 分发action</span></span>
<span class="line"><span style="color:#24292E;">store.</span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">({ type: </span><span style="color:#032F62;">&#39;INCREMENT&#39;</span><span style="color:#24292E;"> }) </span><span style="color:#6A737D;">// 分发action</span></span>
<span class="line"><span style="color:#6A737D;">//console.log(store.getState())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="redux的内部执行原理" tabindex="-1">redux的内部执行原理 <a class="header-anchor" href="#redux的内部执行原理" aria-label="Permalink to &quot;redux的内部执行原理&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 创建store的时候,会自动调用一次reducer函数</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">store</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createStore</span><span style="color:#E1E4E8;">(reducer)</span></span>
<span class="line"><span style="color:#6A737D;">// redux内部会创建一个action {type: &quot;@@redux/INIT8.v.s.i.j.j&quot;}</span></span>
<span class="line"><span style="color:#6A737D;">// 目的是让reducer中执行默认的返回值,从而拿到state的初始化值</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">reducer</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">action</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;"> (action.type) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;INCREMENT&#39;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">  state </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> state </span><span style="color:#6A737D;">//一定要写一个默认情况,返回原来的state</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">store.</span><span style="color:#B392F0;">dispatch</span><span style="color:#E1E4E8;">({ type: </span><span style="color:#9ECBFF;">&#39;INCREMENT&#39;</span><span style="color:#E1E4E8;"> }) </span><span style="color:#6A737D;">//这次分发action,reducer中拿到的state 0</span></span>
<span class="line"><span style="color:#E1E4E8;">store.</span><span style="color:#B392F0;">dispatch</span><span style="color:#E1E4E8;">({ type: </span><span style="color:#9ECBFF;">&#39;INCREMENT&#39;</span><span style="color:#E1E4E8;"> }) </span><span style="color:#6A737D;">// 这次分发action,reducer中拿到的state 1</span></span>
<span class="line"><span style="color:#6A737D;">//console.log(store.getState())</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建store的时候,会自动调用一次reducer函数</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">store</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createStore</span><span style="color:#24292E;">(reducer)</span></span>
<span class="line"><span style="color:#6A737D;">// redux内部会创建一个action {type: &quot;@@redux/INIT8.v.s.i.j.j&quot;}</span></span>
<span class="line"><span style="color:#6A737D;">// 目的是让reducer中执行默认的返回值,从而拿到state的初始化值</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">reducer</span><span style="color:#24292E;">(</span><span style="color:#E36209;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#E36209;">action</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">switch</span><span style="color:#24292E;"> (action.type) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;INCREMENT&#39;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">  state </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">default</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> state </span><span style="color:#6A737D;">//一定要写一个默认情况,返回原来的state</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">store.</span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">({ type: </span><span style="color:#032F62;">&#39;INCREMENT&#39;</span><span style="color:#24292E;"> }) </span><span style="color:#6A737D;">//这次分发action,reducer中拿到的state 0</span></span>
<span class="line"><span style="color:#24292E;">store.</span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">({ type: </span><span style="color:#032F62;">&#39;INCREMENT&#39;</span><span style="color:#24292E;"> }) </span><span style="color:#6A737D;">// 这次分发action,reducer中拿到的state 1</span></span>
<span class="line"><span style="color:#6A737D;">//console.log(store.getState())</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="react-redux" tabindex="-1">react-redux <a class="header-anchor" href="#react-redux" aria-label="Permalink to &quot;react-redux&quot;">​</a></h2><ul><li>Redux 只能用来管理应用的 state。</li><li>如果要配合 react 使用，需要借助 react-redux 这个绑定库。</li></ul><p><img src="`+E+'" alt="react-redux"><img src="'+i+`" alt="react-redux1"></p><h3 id="核心api" tabindex="-1">核心API <a class="header-anchor" href="#核心api" aria-label="Permalink to &quot;核心API&quot;">​</a></h3><ul><li>Provider 组件：用来包裹整个 React 应用，接收 store 属性，为应用提供 state 和 操作 state 的方法。</li><li>connect 函数：连接 Redux 和 React 组件，为被包裹的组件提供 state 和 操作 state 的方法。 组件中通过 props 获取 Redux store 的内容。</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Provider } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react-redux&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Provider</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">store</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{store}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#79B8FF;">App</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Provider</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Provider } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react-redux&#39;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">Provider</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">store</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{store}&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#005CC5;">App</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#005CC5;">Provider</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">()(Counter)</span></span>
<span class="line"><span style="color:#6A737D;">// mapStateToProps 函数：提供组件用到的state，作为组件的props，传递给 Counter 组件</span></span>
<span class="line"><span style="color:#6A737D;">// mapDispatchToProps 函数：提供组件用到的操作state的方法，作为组件的props ，传递给 Counter 组件</span></span>
<span class="line"><span style="color:#6A737D;">//注意: 这两个参数是函数,一定要有返回值(返回值是对象)并且都是可选的(可以不传) </span></span>
<span class="line"><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(mapStateToProps, mapDispatchToProps)(Counter)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">()(Counter)</span></span>
<span class="line"><span style="color:#6A737D;">// mapStateToProps 函数：提供组件用到的state，作为组件的props，传递给 Counter 组件</span></span>
<span class="line"><span style="color:#6A737D;">// mapDispatchToProps 函数：提供组件用到的操作state的方法，作为组件的props ，传递给 Counter 组件</span></span>
<span class="line"><span style="color:#6A737D;">//注意: 这两个参数是函数,一定要有返回值(返回值是对象)并且都是可选的(可以不传) </span></span>
<span class="line"><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(mapStateToProps, mapDispatchToProps)(Counter)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="使用步骤" tabindex="-1">使用步骤 <a class="header-anchor" href="#使用步骤" aria-label="Permalink to &quot;使用步骤&quot;">​</a></h3><ul><li>1 安装：<code>yarn add react-redux</code>。</li><li>2 导入 Provider 组件。</li><li>3 使用 Provider 组件，作为 React 应用的根组件，包裹整个应用。</li><li>4 将 redux 的 store 作为 Provider 组件 store 属性的值。</li><li>5 导入 connect 函数（将 React 组件 和 Redux store 链接在一起）。</li><li>6 使用 connect 函数，包装 React 组件。</li><li>7 在 React 组件中，通过 props 获取到 Redux store 中的state。</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//导入provider和connect</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Provider, connect } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react-redux&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 定义的函数组件</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Counter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(props) </span><span style="color:#6A737D;">//默认可以获取到dispatch方法</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;{props.count}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> props.</span><span style="color:#B392F0;">onincrement</span><span style="color:#E1E4E8;">()}&gt;+1&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//使用connect包装Counter组件</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">WithCounter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  mapState,</span></span>
<span class="line"><span style="color:#E1E4E8;">  mapDispatch</span></span>
<span class="line"><span style="color:#E1E4E8;">)(Counter)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//connect要用的第一个参数 </span></span>
<span class="line"><span style="color:#6A737D;">// state是redux中的state</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mapState</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 这里return的内容就是react组件中props接收到的数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    count: state</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//connect要用的第二个参数</span></span>
<span class="line"><span style="color:#6A737D;">//dispatch 是redux中的dispath</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mapDispatch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">dispatch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#6A737D;">// 这里return的内容就是react组件中props接收到的数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">onincrement</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">dispatch</span><span style="color:#E1E4E8;">({ type: </span><span style="color:#9ECBFF;">&#39;INCREMENT&#39;</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//最终使用包装后的组件</span></span>
<span class="line"><span style="color:#E1E4E8;">ReactDOM.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#79B8FF;">Provider</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">store</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{store}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">WithCounter</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#79B8FF;">WithCounter</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#79B8FF;">Provider</span><span style="color:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="color:#E1E4E8;">  document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;root&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//导入provider和connect</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Provider, connect } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react-redux&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 定义的函数组件</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Counter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">props</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(props) </span><span style="color:#6A737D;">//默认可以获取到dispatch方法</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;{props.count}&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> props.</span><span style="color:#6F42C1;">onincrement</span><span style="color:#24292E;">()}&gt;+1&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  )</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//使用connect包装Counter组件</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">WithCounter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  mapState,</span></span>
<span class="line"><span style="color:#24292E;">  mapDispatch</span></span>
<span class="line"><span style="color:#24292E;">)(Counter)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//connect要用的第一个参数 </span></span>
<span class="line"><span style="color:#6A737D;">// state是redux中的state</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mapState</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 这里return的内容就是react组件中props接收到的数据</span></span>
<span class="line"><span style="color:#24292E;">    count: state</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//connect要用的第二个参数</span></span>
<span class="line"><span style="color:#6A737D;">//dispatch 是redux中的dispath</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mapDispatch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">dispatch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#6A737D;">// 这里return的内容就是react组件中props接收到的数据</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">onincrement</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">({ type: </span><span style="color:#032F62;">&#39;INCREMENT&#39;</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//最终使用包装后的组件</span></span>
<span class="line"><span style="color:#24292E;">ReactDOM.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#005CC5;">Provider</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">store</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{store}&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#005CC5;">WithCounter</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#005CC5;">WithCounter</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#005CC5;">Provider</span><span style="color:#24292E;">&gt;,</span></span>
<span class="line"><span style="color:#24292E;">  document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;root&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h2 id="react-redux-简写形式" tabindex="-1">react-redux 简写形式 <a class="header-anchor" href="#react-redux-简写形式" aria-label="Permalink to &quot;react-redux 简写形式&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// loading和getUserDataAsync 是连个actionCeater函数</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  loading,</span></span>
<span class="line"><span style="color:#E1E4E8;">  getUserDataAsync</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./redux/actions&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 基础写法: </span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mapStateToProps</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// console.log(state)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">state</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mapDisPatchToProps</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">dispatch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">loading</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">dispatch</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">loading</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getUserDataAsync</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">searchname</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">dispatch</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">getUserDataAsync</span><span style="color:#E1E4E8;">(searchname))</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;"> mapStateToProps,</span></span>
<span class="line"><span style="color:#E1E4E8;"> mapDisPatchToProps</span></span>
<span class="line"><span style="color:#E1E4E8;">)(UI组件)</span></span>
<span class="line"><span style="color:#6A737D;">// 简写形式:</span></span>
<span class="line"><span style="color:#6A737D;">// 上面的方式可以简写成下面这种方式:</span></span>
<span class="line"><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ({ </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">state }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  { loading, getUserDataAsync }</span></span>
<span class="line"><span style="color:#E1E4E8;">)(UI组件)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// loading和getUserDataAsync 是连个actionCeater函数</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  loading,</span></span>
<span class="line"><span style="color:#24292E;">  getUserDataAsync</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./redux/actions&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 基础写法: </span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mapStateToProps</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// console.log(state)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">state</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mapDisPatchToProps</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#E36209;">dispatch</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">loading</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">loading</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getUserDataAsync</span><span style="color:#24292E;">: </span><span style="color:#E36209;">searchname</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">getUserDataAsync</span><span style="color:#24292E;">(searchname))</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;"> mapStateToProps,</span></span>
<span class="line"><span style="color:#24292E;"> mapDisPatchToProps</span></span>
<span class="line"><span style="color:#24292E;">)(UI组件)</span></span>
<span class="line"><span style="color:#6A737D;">// 简写形式:</span></span>
<span class="line"><span style="color:#6A737D;">// 上面的方式可以简写成下面这种方式:</span></span>
<span class="line"><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({ </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">state }),</span></span>
<span class="line"><span style="color:#24292E;">  { loading, getUserDataAsync }</span></span>
<span class="line"><span style="color:#24292E;">)(UI组件)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h2 id="两种类型的组件" tabindex="-1">两种类型的组件 <a class="header-anchor" href="#两种类型的组件" aria-label="Permalink to &quot;两种类型的组件&quot;">​</a></h2><ul><li>展示组件(UI组件) <ul><li>可以理解为： 不跟 redux 关联的组件（要传入connect() 中的组件 ）</li><li>特点： 提供了组件的结构和样式</li></ul></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Todo</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#005CC5;">Todo</span><span style="color:#24292E;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><ul><li>容器组件 <ul><li>可以理解为： 跟 redux 密切关联的组件（ 调用 connect() 之后得到的组件 ）</li><li>特点： 专门与 redux 进行交互</li></ul></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 容器组件</span></span>
<span class="line"><span style="color:#6A737D;">// withTodo 就是容器组件</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">withTodo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">connect</span><span style="color:#E1E4E8;">()(Todo)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 容器组件</span></span>
<span class="line"><span style="color:#6A737D;">// withTodo 就是容器组件</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">withTodo</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">connect</span><span style="color:#24292E;">()(Todo)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="redux-thunk-使用" tabindex="-1">redux-thunk 使用 <a class="header-anchor" href="#redux-thunk-使用" aria-label="Permalink to &quot;redux-thunk 使用&quot;">​</a></h2><pre><code>1. 安装：yarn add redux-thunk
2. 导入thunk    import thunk from &#39;redux-thunk&#39;
3. 导入redux中的一个函数：\`applyMiddleware\`
4. 将redux-thunk中间件，作为参数传递给 applyMiddleware
5. 将 middlewares 传递给 createStore，作为它的第三个参数
</code></pre><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> thunk </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;redux-thunk&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 注意： logger 中间件应该放在后面</span></span>
<span class="line"><span style="color:#B392F0;">createStore</span><span style="color:#E1E4E8;">(reducer,</span><span style="color:#B392F0;">applyMiddleware</span><span style="color:#E1E4E8;">(thunk,中间件,中间件))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> thunk </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;redux-thunk&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 注意： logger 中间件应该放在后面</span></span>
<span class="line"><span style="color:#6F42C1;">createStore</span><span style="color:#24292E;">(reducer,</span><span style="color:#6F42C1;">applyMiddleware</span><span style="color:#24292E;">(thunk,中间件,中间件))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong>注意：redux-thunk对 action 做了处理，异步操作就是放在action中被处理的！！！</strong></li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 同步的action </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> { type: </span><span style="color:#9ECBFF;">&#39;INCREMENT&#39;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//异步的action  --要求返回一个函数,这个函数可以拿到dispatch</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">incrementAsync</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//thunk会处理这个函数,将dispatch传入到函数中</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">dispatch</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">dispatch</span><span style="color:#E1E4E8;">({ type: </span><span style="color:#9ECBFF;">&#39;INCREMENT&#39;</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, </span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 同步的action </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">increment</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> { type: </span><span style="color:#032F62;">&#39;INCREMENT&#39;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//异步的action  --要求返回一个函数,这个函数可以拿到dispatch</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">incrementAsync</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//thunk会处理这个函数,将dispatch传入到函数中</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">dispatch</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">({ type: </span><span style="color:#032F62;">&#39;INCREMENT&#39;</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">    }, </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  } </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>注意:</strong> 标准的异步请求应该有三个状态, 1.等待 2.成功 3.失败</p><h2 id="chrome的redux插件" tabindex="-1">chrome的redux插件 <a class="header-anchor" href="#chrome的redux插件" aria-label="Permalink to &quot;chrome的redux插件&quot;">​</a></h2><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 1. 单独使用 redux 浏览器插件：</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">store</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createStore</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  reducer,</span></span>
<span class="line"><span style="color:#E1E4E8;">  initialState,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 单独使用 redux 浏览器插件</span></span>
<span class="line"><span style="color:#E1E4E8;">  window.__REDUX_DEVTOOLS_EXTENSION__ </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> window.</span><span style="color:#B392F0;">__REDUX_DEVTOOLS_EXTENSION__</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 和中间件配合使用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">yarn add redux</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">devtools</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">extension </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">D</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { composeWithDevTools } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;redux-devtools-extension&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">createStore</span><span style="color:#E1E4E8;">(reducer, initialState, </span><span style="color:#B392F0;">composeWithDevTools</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">applyMiddleware</span><span style="color:#E1E4E8;">(logger)))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1. 单独使用 redux 浏览器插件：</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">store</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createStore</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  reducer,</span></span>
<span class="line"><span style="color:#24292E;">  initialState,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 单独使用 redux 浏览器插件</span></span>
<span class="line"><span style="color:#24292E;">  window.__REDUX_DEVTOOLS_EXTENSION__ </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> window.</span><span style="color:#6F42C1;">__REDUX_DEVTOOLS_EXTENSION__</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 2. 和中间件配合使用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">yarn add redux</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">devtools</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">extension </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">D</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { composeWithDevTools } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;redux-devtools-extension&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">createStore</span><span style="color:#24292E;">(reducer, initialState, </span><span style="color:#6F42C1;">composeWithDevTools</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">applyMiddleware</span><span style="color:#24292E;">(logger)))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="combinereducers" tabindex="-1">combineReducers <a class="header-anchor" href="#combinereducers" aria-label="Permalink to &quot;combineReducers&quot;">​</a></h2><ul><li>redux 中提供的一个 API</li><li>作用： <ul><li>1 用来将多个 reducer 合并为一个 根reducer</li><li>2 会影响 redux 中的状态值</li></ul></li><li>有了这个方法之后，将来 redux 中就可以有任意多个 reducer，这样，每个 reducer 只需要处理某个特定的状态即可。</li><li>注意：每个 reducer 中的状态最终被全部合并到一个对象中。对象中的键就是参数对象的键</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createStore, combineReducers} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;redux&#39;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rootReducer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">combineReducers</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  todos: reducer,</span></span>
<span class="line"><span style="color:#E1E4E8;">  filter:filter</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">store</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createStore</span><span style="color:#E1E4E8;">( rootReducer )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">store.</span><span style="color:#B392F0;">getState</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 初始状态： { todos: [], filter: &#39;all&#39; }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createStore, combineReducers} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;redux&#39;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">rootReducer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">combineReducers</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  todos: reducer,</span></span>
<span class="line"><span style="color:#24292E;">  filter:filter</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">store</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createStore</span><span style="color:#24292E;">( rootReducer )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">store.</span><span style="color:#6F42C1;">getState</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 初始状态： { todos: [], filter: &#39;all&#39; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 此时的应用的状态为：{ todos: [], filter: &#39;all&#39; }</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rootReducer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">combineReducers</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  todos: reducer,</span></span>
<span class="line"><span style="color:#E1E4E8;">  filter</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 该写法等价于上述combineReducers调用：</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rootReducer</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {}, </span><span style="color:#FFAB70;">action</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    todos: </span><span style="color:#B392F0;">reducer</span><span style="color:#E1E4E8;">(state.todos, action),</span></span>
<span class="line"><span style="color:#E1E4E8;">    filter: </span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(state.filter, action)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 当我们使用 dispatch( 动作 ) 分发了一个动作的时候， redux 中所有的 reducer 全部都会执行一次</span></span>
<span class="line"><span style="color:#6A737D;">// 因为 redux 无法知道到底是哪个reducer来处理该状态，所以，所有的 reducer 全部都会被重新执行一次</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 此时的应用的状态为：{ todos: [], filter: &#39;all&#39; }</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">rootReducer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">combineReducers</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  todos: reducer,</span></span>
<span class="line"><span style="color:#24292E;">  filter</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 该写法等价于上述combineReducers调用：</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rootReducer</span><span style="color:#24292E;">(</span><span style="color:#E36209;">state</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {}, </span><span style="color:#E36209;">action</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    todos: </span><span style="color:#6F42C1;">reducer</span><span style="color:#24292E;">(state.todos, action),</span></span>
<span class="line"><span style="color:#24292E;">    filter: </span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(state.filter, action)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 当我们使用 dispatch( 动作 ) 分发了一个动作的时候， redux 中所有的 reducer 全部都会执行一次</span></span>
<span class="line"><span style="color:#6A737D;">// 因为 redux 无法知道到底是哪个reducer来处理该状态，所以，所有的 reducer 全部都会被重新执行一次</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>`,64),d=[u];function b(m,F,h,D,A,g){return n(),a("div",null,d)}const x=s(y,[["render",b]]);export{v as __pageData,x as default};
