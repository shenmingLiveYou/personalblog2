import{_ as s,o as e,c as a,Q as n}from"./chunks/framework.cfbd61a4.js";const l="/personalblog2/assets/1665208751013.d1256f87.png",p="/personalblog2/assets/1665210362205.1d910ddf.png",i="/personalblog2/assets/1665210383550.9a577b2a.png",t="/personalblog2/assets/1665211509076.93408131.png",o="/personalblog2/assets/1665209866771.23de4cff.png",r="/personalblog2/assets/1665219629769.90f7e1cb.png",c="/personalblog2/assets/1665289103387.0000b4ed.png",d="/personalblog2/assets/1665289043606.615d58da.png",g="/personalblog2/assets/1665289015052.c5334b5d.png",u="/personalblog2/assets/1665288981609.339e0608.png",h="/personalblog2/assets/1665290219435.5be0f9fc.png",b="/personalblog2/assets/1665215977332.82c5ea1a.png",m="/personalblog2/assets/1665220440112.b73184ea.png",j=JSON.parse('{"title":"git代码版本控制软件","description":"","frontmatter":{},"headers":[],"relativePath":"pages/git/git.md","filePath":"pages/git/git.md","lastUpdated":null}'),v={name:"pages/git/git.md"},y=n('<h1 id="git代码版本控制软件" tabindex="-1">git代码版本控制软件 <a class="header-anchor" href="#git代码版本控制软件" aria-label="Permalink to &quot;git代码版本控制软件&quot;">​</a></h1><h2 id="为什么要使用代码版本控制软件" tabindex="-1">为什么要使用代码版本控制软件 <a class="header-anchor" href="#为什么要使用代码版本控制软件" aria-label="Permalink to &quot;为什么要使用代码版本控制软件&quot;">​</a></h2><p>作用：</p><ol><li>团队协作开发：多个人员开发不同的模块，最终要合并代码。</li><li>版本回退（可追溯）：可让项目回到指定的版本，即后悔药。</li><li>代码备份：电脑系统奔溃，没事，只要代码提交到仓库中，可在拉取下来。</li></ol><p>常见的代码版本控制软件有csv、svn(集中式)、git （功能非常强大）</p><h2 id="git工具介绍" tabindex="-1">git工具介绍 <a class="header-anchor" href="#git工具介绍" aria-label="Permalink to &quot;git工具介绍&quot;">​</a></h2><ul><li><p>git是一个开源的代码版本控制系统，可以有效、高速地处理项目版本管理。</p></li><li><p>git特点：分布式。即git客户端和服务器可以同时保存多个代码版本.</p><ul><li><blockquote><p>svn:是一个集中式。即所有的代码版本全都是存在服务端。</p></blockquote></li></ul></li><li><p>git发明者：是Linux创始人<a href="https://baike.baidu.com/item/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%9C%AC%E7%BA%B3%E7%AC%AC%E5%85%8B%E7%89%B9%C2%B7%E6%89%98%E7%93%A6%E5%85%B9/1034429" target="_blank" rel="noreferrer">林纳斯</a> ，最开始是用于管理Linux内核源码的。</p></li></ul><p>git是C/S架构的软件</p><ul><li>C: client客户端，自己需要安装</li><li>S: server服务端，可以自己搭建git服务器，或使用第三方的如github或码云仓库。有些企业也会搭建自己私有的代码托管服务器。</li></ul><p><img src="'+l+'" alt="1665208751013"></p><p>github、码云是免费的第三方代码托管平台</p><h1 id="安装git客户端工具" tabindex="-1">安装git客户端工具 <a class="header-anchor" href="#安装git客户端工具" aria-label="Permalink to &quot;安装git客户端工具&quot;">​</a></h1><p>安装时候，注意自己系统的位数。64还是32位</p><p>下载地址：<a href="https://git-scm.com/download/win" target="_blank" rel="noreferrer">https://git-scm.com/download/win</a></p><p><img src="'+p+'" alt="image.png"> 安装的时候选择安装路径即可，然后一路next即可。安装好后创建文件夹，进去鼠标右键会多出以下两个选项，代表git工具安装完成。 <img src="'+i+`" alt="1665210383550"></p><h1 id="全局设置提交的用户名和邮箱" tabindex="-1">全局设置提交的用户名和邮箱 <a class="header-anchor" href="#全局设置提交的用户名和邮箱" aria-label="Permalink to &quot;全局设置提交的用户名和邮箱&quot;">​</a></h1><p>全局设置：必须先要设置提交的用户名和邮箱，否则无法提交代码。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git config --global user.name 名字     #叫啥名字</span></span>
<span class="line"><span style="color:#e1e4e8;">git config --global user.email 邮箱	#怎么联系你</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git config --global user.name 名字     #叫啥名字</span></span>
<span class="line"><span style="color:#24292e;">git config --global user.email 邮箱	#怎么联系你</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>去掉<code>--global</code>则只在当前项目中有效，让每个项目有不同的名字</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git config user.name 名字     #叫啥名字</span></span>
<span class="line"><span style="color:#e1e4e8;">git config user.email 邮箱	#怎么联系你</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git config user.name 名字     #叫啥名字</span></span>
<span class="line"><span style="color:#24292e;">git config user.email 邮箱	#怎么联系你</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>查看配置信息</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git config --list</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git config --list</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>结果：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">user.name=你上面设置的用户名</span></span>
<span class="line"><span style="color:#e1e4e8;">user.email=你上面设置的邮箱</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">user.name=你上面设置的用户名</span></span>
<span class="line"><span style="color:#24292e;">user.email=你上面设置的邮箱</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h1 id="创建git仓库" tabindex="-1">创建git仓库 <a class="header-anchor" href="#创建git仓库" aria-label="Permalink to &quot;创建git仓库&quot;">​</a></h1><p>仓库git仓库有两种方式：</p><ol><li>在本地文件夹中执行<code>git init</code>指令，会将当前文件夹初始化为一个git仓库。</li><li>也可从远程服务器（github、码云）创建一个仓库，然后再执行<code>git clone</code>克隆到本地</li></ol><p>这里我们先使用方式1来创建仓库：</p><p>从本地文件夹创建一个git仓库，步骤如下：</p><ol><li>创建一个空文件夹：如<code>shop</code></li><li>进行<code>shop</code>文件夹中，点击空白处，鼠标右键选择<code>Git base here</code>， 输入<code>git init </code>指令，此时目录会生成一个<code>.git</code>的目录。那么git库就创建成功了。</li></ol><p><img src="`+t+'" alt="1665211509076"></p><p>由于<code>.git</code>,是隐藏目录，默认不显示出来，找到文件夹上方的 <strong>查看-&gt;隐藏的项目</strong>，将其勾选即可查看。</p><blockquote><p>注：不要去改.git目录中的任何文件，否则会破坏git仓库。</p></blockquote><h1 id="git工作流" tabindex="-1">git工作流 <a class="header-anchor" href="#git工作流" aria-label="Permalink to &quot;git工作流&quot;">​</a></h1><p>工作区：我们的工作目录。</p><p>版本库：存储仓库代码的地方。存在于<code>.git目录</code></p><ul><li>暂存区：英文名叫stage或Index,存在于<code>.git</code>目录中的<code>index</code>文件中</li><li>本地仓库：代码实际存储的地方。且默认会有个master 分支， 其中HEAD 指针是指向当前所在的分支。</li></ul><p><img src="'+o+'" alt="1665209866771"></p><h1 id="git常用指令" tabindex="-1">git常用指令 <a class="header-anchor" href="#git常用指令" aria-label="Permalink to &quot;git常用指令&quot;">​</a></h1><p><img src="'+r+`" alt="1665219629769"></p><p>查看命令如何使用，输入：<code>git commit --help</code> 或 <code>git commit -h </code></p><p>git使用文档：<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noreferrer">https://git-scm.com/book/zh/v2</a></p><h2 id="git-add" tabindex="-1">git add <a class="header-anchor" href="#git-add" aria-label="Permalink to &quot;git add&quot;">​</a></h2><p>默认在工作区创建的文件是属于未跟踪（Untracked files:）的，需要执行add指令将其添加到暂存区。</p><p>add指令作用：添加当前工作目录中的文件添到暂存区中:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git add .   #添加当前工作目录中的所有文件到暂存区</span></span>
<span class="line"><span style="color:#e1e4e8;">git add filename    #添加当前工作目录中指定文件到暂存区:</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git add .   #添加当前工作目录中的所有文件到暂存区</span></span>
<span class="line"><span style="color:#24292e;">git add filename    #添加当前工作目录中指定文件到暂存区:</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="git-status" tabindex="-1">git status <a class="header-anchor" href="#git-status" aria-label="Permalink to &quot;git status&quot;">​</a></h2><p>作用：查看暂存区状态文件的状态。是新增、删除、还是修改状态。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git status</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git status</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>清屏命令：clear。或快捷键<code>ctrl + L</code></p><h2 id="git-commit" tabindex="-1">git commit <a class="header-anchor" href="#git-commit" aria-label="Permalink to &quot;git commit&quot;">​</a></h2><p>作用：把暂存区中的文件提交到本地仓库中</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git commit -m &#39;备注信息&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git commit -m &#39;备注信息&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>对于之前已经提交过本地仓库中的文件，再次提交时，中间可以省略add指令</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git commit -am &#39;备注信息&#39; #add和commit连写</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git commit -am &#39;备注信息&#39; #add和commit连写</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>-m</code> 选项指定了一条将会存储在标签中的信息。 如果没有指定一条信息，Git 会启动编辑器要求你输入信息</p><p>git默认不能提交空文件夹，仅能跟踪功能文件的变化。</p><p>若要提交空文件夹，则需要在里面创建一个.gitkeep文件方可提交</p><h2 id="git-log" tabindex="-1">git log <a class="header-anchor" href="#git-log" aria-label="Permalink to &quot;git log&quot;">​</a></h2><p>作用：查看提交的日志信息</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git log </span></span>
<span class="line"><span style="color:#e1e4e8;">或</span></span>
<span class="line"><span style="color:#e1e4e8;">git log --oneline</span></span>
<span class="line"><span style="color:#e1e4e8;">更酷的图形化显示方式（含分支的信息）：</span></span>
<span class="line"><span style="color:#e1e4e8;">git log --oneline --graph</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git log </span></span>
<span class="line"><span style="color:#24292e;">或</span></span>
<span class="line"><span style="color:#24292e;">git log --oneline</span></span>
<span class="line"><span style="color:#24292e;">更酷的图形化显示方式（含分支的信息）：</span></span>
<span class="line"><span style="color:#24292e;">git log --oneline --graph</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>操作如下：</p><p><img src="`+c+'" alt="1665289103387"></p><p>使用git log查看日志时，命令行最后一行会有：号，后面输入q即可退出日志的查看。如果不小心按住了其他键，则重新输入<code>:q</code> 即可。</p><p><img src="'+d+'" alt="1665289043606"></p><p><img src="'+g+'" alt="1665289015052"></p><h2 id="git-alias" tabindex="-1">git alias <a class="header-anchor" href="#git-alias" aria-label="Permalink to &quot;git alias&quot;">​</a></h2><p>git alias： 设置命令的别名。</p><p>若git带有较多参数的时候，可以使用alias别名的操作简化</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git config --global alias.别名 &quot;命令全称&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git config --global alias.别名 &quot;命令全称&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如给log命令设置别名为lg:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git config --global alias.lg &quot;log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset&#39; --abbrev-commit --date=relative&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git config --global alias.lg &quot;log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset&#39; --abbrev-commit --date=relative&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>可查看提交的信息、日期时间、附注信息、作者</p><p>效果如下： <img src="'+u+`" alt="1665288981609"></p><p>HEAD是指向前当前分支中最后一次提交的引用。</p><p>删除别名：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git config --global --unset alias.leilei</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git config --global --unset alias.leilei</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="git-rm-删除文件" tabindex="-1">git rm 删除文件 <a class="header-anchor" href="#git-rm-删除文件" aria-label="Permalink to &quot;git rm 删除文件&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git rm filename # 删除某个文件（只能删除已经被跟踪的文件）</span></span>
<span class="line"><span style="color:#e1e4e8;">git checkout .  # 撤销所有的操作(文件的修改操作)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git rm filename # 删除某个文件（只能删除已经被跟踪的文件）</span></span>
<span class="line"><span style="color:#24292e;">git checkout .  # 撤销所有的操作(文件的修改操作)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="git-log和git-reflog的区别" tabindex="-1">git log和git reflog的区别 <a class="header-anchor" href="#git-log和git-reflog的区别" aria-label="Permalink to &quot;git log和git reflog的区别&quot;">​</a></h2><ul><li>git log：显示本地仓库中提交的日志信息。。</li><li>git reflog：显示所有操作过的记录，含回退日志的记录。 比git log更详细。</li></ul><h2 id="git-reset-版本回退" tabindex="-1">git reset 版本回退 <a class="header-anchor" href="#git-reset-版本回退" aria-label="Permalink to &quot;git reset 版本回退&quot;">​</a></h2><p>reset作用：实现提交后版本回退</p><p>使用git relog 获取版本日志的前7位,可以回到指定的版本</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git reset --hard af4542g</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git reset --hard af4542g</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="`+h+'" alt="1665290219435"></p><h1 id="github中创建仓库-克隆" tabindex="-1">github中创建仓库&amp;克隆 <a class="header-anchor" href="#github中创建仓库-克隆" aria-label="Permalink to &quot;github中创建仓库&amp;克隆&quot;">​</a></h1><h2 id="github中创建远程仓库" tabindex="-1">github中创建远程仓库 <a class="header-anchor" href="#github中创建远程仓库" aria-label="Permalink to &quot;github中创建远程仓库&quot;">​</a></h2><p>创建仓库比较简单，参考下面的图片即可： 点击加号+，选择New repository新建仓库 <img src="'+b+`" alt="1665215977332"></p><p>码云中创建仓库同理！</p><h2 id="git-push推送远程仓库" tabindex="-1">git push推送远程仓库 <a class="header-anchor" href="#git-push推送远程仓库" aria-label="Permalink to &quot;git push推送远程仓库&quot;">​</a></h2><p>git push作用：用于将本地仓库代码推送到远程仓库。</p><p>之前的提交都将代码提交到本地仓库，而需要把代码分享给另外一个协同者，需要推送到远程仓库。</p><p>将本地仓库与远程仓库地址进行关联：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git remote  -v       			#查看本地的远程仓库地址</span></span>
<span class="line"><span style="color:#e1e4e8;">git remote add origin 仓库地址 	  #设置本地的远程仓库地址，其中origin是远程服务器名称，也可以改名</span></span>
<span class="line"><span style="color:#e1e4e8;">git remote rm origin			#移除本地远程仓库地址origin</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git remote  -v       			#查看本地的远程仓库地址</span></span>
<span class="line"><span style="color:#24292e;">git remote add origin 仓库地址 	  #设置本地的远程仓库地址，其中origin是远程服务器名称，也可以改名</span></span>
<span class="line"><span style="color:#24292e;">git remote rm origin			#移除本地远程仓库地址origin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>推送代码：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git push -u 远程名称 本地分支名:远程分支名</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git push -u 远程名称 本地分支名:远程分支名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如：将本地的master分支推送到origin主机的master分支，命令可以这么写：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git push -u origin master:master</span></span>
<span class="line"><span style="color:#e1e4e8;"># 本地与远程分支一样简写</span></span>
<span class="line"><span style="color:#e1e4e8;">git push -u origin master</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git push -u origin master:master</span></span>
<span class="line"><span style="color:#24292e;"># 本地与远程分支一样简写</span></span>
<span class="line"><span style="color:#24292e;">git push -u origin master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果当前分支与多个远程主机存在追踪关系,一般下情况下，第一次推送加<code>-u</code>，可记住远程主机名，后面在推送可以省略。</p><p>不带任何参数的git push，默认只推送第一次通过-u指定的主机和分支，</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git push</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git push</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>push 推送时候会要求你输入用户名和密码，你也可以选择记住密码，后面就无须输入</p></blockquote><p>使用github遇到的问题及解决办法！</p><p>解决端口 OpenSSL SSL_read 或 443 等网络相关错误</p><p>如果遇到以下问题：</p><blockquote><p>Failed to connect to github.com port 443:connection timed out</p><p>或</p><p>OpenSSL SSL_read: Connection was reset, errno 10054</p></blockquote><p>解决办法取消代理即可：</p><p>方式1：取消（ctrl +c）,多试几遍</p><p>方式2：取消代理，如下</p><blockquote><p>git config --global --unset http.proxy git config --global --unset https.proxy</p></blockquote><h2 id="克隆远程仓库代码" tabindex="-1">克隆远程仓库代码 <a class="header-anchor" href="#克隆远程仓库代码" aria-label="Permalink to &quot;克隆远程仓库代码&quot;">​</a></h2><p>克隆远程的仓库代码到指定目录:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git clone url  [本地目录]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git clone url  [本地目录]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>注意：不写本地目录名称默认会在当前目录创建一个与远程仓库同名的目录</p></blockquote><p>也可以仓库源码克隆到一个指定的目录如： myshop目录</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git clone url myshop</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git clone url myshop</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="拉取远程仓库代码" tabindex="-1">拉取远程仓库代码 <a class="header-anchor" href="#拉取远程仓库代码" aria-label="Permalink to &quot;拉取远程仓库代码&quot;">​</a></h2><p>git pull作用：拉取远程仓库中的代码到本地仓库中。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git pull 远程主机名 远程分支:本地分支</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git pull 远程主机名 远程分支:本地分支</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>注意，分支push推送顺序的写法是<code>&lt;本地分支&gt;:&lt;远程分支&gt;</code>，而pull拉取是<code>&lt;远程分支&gt;:&lt;本地分支&gt;</code>，他们是相反的</p></blockquote><p>拉取和获取的区别：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git pull origin master # 拉取 远程仓库代码并合并到本地master分支</span></span>
<span class="line"><span style="color:#e1e4e8;">git fetch origin master # 获取 远程仓库代码不会合并，需要执行 git merge  进行合并</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git pull origin master # 拉取 远程仓库代码并合并到本地master分支</span></span>
<span class="line"><span style="color:#24292e;">git fetch origin master # 获取 远程仓库代码不会合并，需要执行 git merge  进行合并</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>git pull （拉取）= git fetch +git merge</p></blockquote><p>特殊情况（及其罕见）：当远程和本地两个仓库不相关时，可以强制合并到本地：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git pull origin master --allow-unrelated-histories</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git pull origin master --allow-unrelated-histories</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h1 id="设置ssh协议免密提交" tabindex="-1">设置ssh协议免密提交 <a class="header-anchor" href="#设置ssh协议免密提交" aria-label="Permalink to &quot;设置ssh协议免密提交&quot;">​</a></h1><p>ssh是一种客户端和服务器之间的安全连接协议。</p><p>仓库地址有两种协议：https、ssh。</p><p>如果仓库地址使用https的协议，每次提交都会要求输入远程仓库github的用户名和密码，</p><p>配置ssh协议可以免去每次推送代码输入密码的烦恼。</p><p>配置步骤：</p><ol><li>电脑本地创建ssh公钥和私钥 ，ssh公钥上传到github或码云。</li><li>把仓库的地址协议改为ssh协议</li></ol><p><strong>1. 创建ssh私钥和公钥：</strong></p><p>终端输入: ssh-keygen ，然后一路回车即可，成功之后会在当前用户的目录多出如下的两个文件。</p><ul><li><p>id.rsa:私钥文件</p></li><li><p>id_rsa.pub:公钥文件</p><p>公钥：理解为锁,上传到github中存放着。 私钥：理解为锁的钥匙，在本地电脑存放着。</p><p>也就是说只有锁的对应钥匙才可以进行提交代码。</p></li></ul><p>把id_rsa.pub的公钥文件内容复制到github指定位置，步骤如下：</p><p>找到右上角用户头像下面的设置settings,在找到SSH一项，点击New SSH Key，把公钥输入文本框中即可：</p><p>输入以下指令,查看ssh是否配置成功：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ssh </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">T</span><span style="color:#E1E4E8;">  git@github.com #针对github</span></span>
<span class="line"><span style="color:#E1E4E8;">ssh </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">T</span><span style="color:#E1E4E8;">  git@gitee.com #针对码云</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ssh </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">T</span><span style="color:#24292E;">  git@github.com #针对github</span></span>
<span class="line"><span style="color:#24292E;">ssh </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">T</span><span style="color:#24292E;">  git@gitee.com #针对码云</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>提示有 You&#39;ve successfully authenticated字样ssh配置成功。</p><p>若是码云仓库也是同理：用户在个人settings-&gt;ssh公钥 中进行添加。</p><p>在继续下面的步骤，把仓库地址配置为ssh协议</p><ol><li><strong>配置仓库地址为ssh地址协议</strong></li></ol><p>先删除原地址，在添加ssh协议地址</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">git remote rm origin</span></span>
<span class="line"><span style="color:#E1E4E8;">git remote add origin ssh地址</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">git remote rm origin</span></span>
<span class="line"><span style="color:#24292E;">git remote add origin ssh地址</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>修改代码，测试push推送！</p><h1 id="解决开发中冲突问题" tabindex="-1">解决开发中冲突问题 <a class="header-anchor" href="#解决开发中冲突问题" aria-label="Permalink to &quot;解决开发中冲突问题&quot;">​</a></h1><p>如果多人开发同一个模块，难免会修改同一个文件相同行代码！后者推送代码时候，则会提示有文件冲突（<code>conflict</code>）！导致推送失败！</p><p>命令行终端会提示：<code> ![rejected]</code> ，意思是拒绝。</p><p>解决办法：先拉取(git pull)最新代码，和同事商量怎么解决，修复之后然后再次重新提交推送！</p><blockquote><p>拉取下来的时候，千万不要直接删除别人的代码！！！一定要沟通！！</p></blockquote><h1 id="创建-gitignore忽略文件" tabindex="-1">创建.gitignore忽略文件 <a class="header-anchor" href="#创建-gitignore忽略文件" aria-label="Permalink to &quot;创建.gitignore忽略文件&quot;">​</a></h1><p>有些文件或目录如果我们只是在项目本地用到，或者这些文件/目录是自动生成的，并不想上传到远程仓库，</p><p>我们可以在仓库目录中创建<code>.gitignore</code>文件，进行忽略规则的编写。</p><p>作用：用于忽略某个文件或目录</p><blockquote><p>必须.git隐藏文件夹在同一目录</p></blockquote><p>示例：创建.gitignore文件，忽略node_modules和dist目录，忽略.DS_Store文件，此文件是苹果mac电脑自动生成的。没啥用</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">node_modules</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">dist</span><span style="color:#F97583;">/</span></span>
<span class="line"><span style="color:#E1E4E8;">.DS_Store</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">node_modules</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">dist</span><span style="color:#D73A49;">/</span></span>
<span class="line"><span style="color:#24292E;">.DS_Store</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>查看各语言忽略文件的参考：<a href="https://github.com/github/gitignore" target="_blank" rel="noreferrer">https://github.com/github/gitignore</a></p><h1 id="项目说明文档" tabindex="-1">项目说明文档 <a class="header-anchor" href="#项目说明文档" aria-label="Permalink to &quot;项目说明文档&quot;">​</a></h1><p>作用：让别人拿到你的项目通过README.md文件的描述快速的了解该项目，相当于项目的使用说明文档。</p><blockquote><p>创建在仓库跟目录中，和.git同级目录</p></blockquote><h1 id="commit提交日志规范" tabindex="-1">commit提交日志规范 <a class="header-anchor" href="#commit提交日志规范" aria-label="Permalink to &quot;commit提交日志规范&quot;">​</a></h1><p>Commit message格式：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;type&gt;: &lt;subject&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">git commit -m &#39;feat: 登录功能&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">git commit -m &#39;fix: 修复上传文件相关漏洞&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">&lt;type&gt;: &lt;subject&gt;</span></span>
<span class="line"><span style="color:#24292e;">git commit -m &#39;feat: 登录功能&#39;</span></span>
<span class="line"><span style="color:#24292e;">git commit -m &#39;fix: 修复上传文件相关漏洞&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>注意冒号后面有空格。</p><p>type：用于说明 commit 的类别，只允许使用下面7个标识。 subject：是 commit 目的的简短描述，不超过50个字符，且结尾不加句号（.）。 提交类型type有如下常见的值：</p><ul><li>feat：新功能（feature）</li><li>fix：修补bug</li><li>docs：文档（documentation）</li><li>style： 格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li><li>test：增加测试</li><li>chore / build：构建过程或辅助工具的变动</li></ul><h1 id="创建标签-版本号" tabindex="-1">创建标签（版本号） <a class="header-anchor" href="#创建标签-版本号" aria-label="Permalink to &quot;创建标签（版本号）&quot;">​</a></h1><p>Git 可以给仓库历史中的某一个提交打上标签，以示重要。 一般我们会使用这个功能来标记发布的代码版本（ <code>v1.0.0</code> 、 <code>v2.0.0</code> 等等）</p><p>查看仓库已有的标签</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">git tag</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">git tag</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>创建标签</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">git tag v1.</span><span style="color:#79B8FF;">0.0</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m </span><span style="color:#9ECBFF;">&#39;完成注册&#39;</span><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">m </span><span style="color:#9ECBFF;">&#39;完成订单&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">git tag v1.</span><span style="color:#005CC5;">0.0</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m </span><span style="color:#032F62;">&#39;完成注册&#39;</span><span style="color:#24292E;">   </span><span style="color:#D73A49;">-</span><span style="color:#24292E;">m </span><span style="color:#032F62;">&#39;完成订单&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>默认情况下，<code>git push</code> 命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地推送标签到共享服务器上。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">git push origin v1.</span><span style="color:#79B8FF;">0.0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">git push origin v1.</span><span style="color:#005CC5;">0.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>推送本地的所有标签到远程仓库</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">git push origin </span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">tags</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">git push origin </span><span style="color:#D73A49;">--</span><span style="color:#24292E;">tags</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>要删除掉你本地仓库上的标签</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git tag -d v1.0.0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git tag -d v1.0.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>删除远程标签</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git push origin --delete v1.0.0</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git push origin --delete v1.0.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h1 id="git分支操作" tabindex="-1">git分支操作 <a class="header-anchor" href="#git分支操作" aria-label="Permalink to &quot;git分支操作&quot;">​</a></h1><p><strong>认识master分支：</strong></p><ul><li><p>master分支：这是每个仓库默认都有的分支，一般叫主分支。主要用来发布代码正式版本的,master一般是可以直接发布在生产环境中，master 分支要确保稳定性。</p></li><li><p>正常开发下，是不可以在master下直接写代码的</p></li></ul><h2 id="为什么需要分支" tabindex="-1">为什么需要分支 <a class="header-anchor" href="#为什么需要分支" aria-label="Permalink to &quot;为什么需要分支&quot;">​</a></h2><p>分支的优点：</p><ul><li>意味着程序员能把自己的工作从开发主线上剥离出来，开发独立功能的时候不会影响主线分支(master)的运行,更加高效。</li><li>当发现线上运行的项目有bug时，只需要在开一个分支进行修复，最后再合并到主线分支即可，这样不会影响master主分支</li><li>....</li></ul><p>常见的分支使用策略：</p><p><strong>dev开发分支：</strong></p><ul><li>dev为开发分支：从master分支中分出来的，后续开发人员主要在此分支下进行开发。</li><li>开发完成后，最终都要dev分支代码合并到master主分支。</li></ul><p><strong>feature功能分支：</strong></p><ul><li>为了开发某种特定功能，从develop分支上面分出来的功能分支的名字</li><li>可以采用feature-* (分支功能/分支名)的形式命名。如支付功能分支： feature-pay</li></ul><p><strong>修补bug分支 (fixbug)：</strong></p><ul><li>软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。修补bug分支是从master分支上面分出来的。修补结束以后，再合并进master和dev分支</li><li>它的命名，可以采用fixbug-*的形式。如修复支付功能：fixbug-pay</li></ul><h2 id="分支相关操作" tabindex="-1">分支相关操作 <a class="header-anchor" href="#分支相关操作" aria-label="Permalink to &quot;分支相关操作&quot;">​</a></h2><ul><li>查看仓库所有的分支:</li></ul><p>git branch</p><ul><li>创建dev分支，并切换到dev</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git branch dev </span></span>
<span class="line"><span style="color:#e1e4e8;">git checkout dev</span></span>
<span class="line"><span style="color:#e1e4e8;">或简写</span></span>
<span class="line"><span style="color:#e1e4e8;">git checkout -b dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git branch dev </span></span>
<span class="line"><span style="color:#24292e;">git checkout dev</span></span>
<span class="line"><span style="color:#24292e;">或简写</span></span>
<span class="line"><span style="color:#24292e;">git checkout -b dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>删除分支dev:</li></ul><p>git branch -d dev</p><ul><li>强制删除:</li></ul><p>git branch -D dev</p><ul><li>推送dev分支到远程仓库</li></ul><p>git push origin dev</p><ul><li>删除远程的dev分支</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git push  origin --delete dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git push  origin --delete dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><p>合并分支代码。如将dev分支合并到master主分支。</p><p>步骤：1 先切换到要合并的分支，2. 再把dev分支合并到当前分支</p></li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git checkout  master    </span></span>
<span class="line"><span style="color:#e1e4e8;">git merge  --no-f  dev  -m  &#39;合并的信息&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git checkout  master    </span></span>
<span class="line"><span style="color:#24292e;">git merge  --no-f  dev  -m  &#39;合并的信息&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>注：合并分支建议添加选项--no-f，这样合并也算一次提交，这样可以让分支线图谱更加清晰。</p><p>合并的时候也可能会发生冲突，需要先解决冲突在操作。</p></blockquote><p><strong>加不加--no-f的区别：</strong></p><p>如图： <img src="`+m+`" alt="1665220440112"></p><ul><li>添加 <code>--no-f</code> 选项可以保存你之前的分支历史。能够更好的查看 merge合并历史，以及branch 状态。</li></ul><h2 id="获取远程分支代码" tabindex="-1">获取远程分支代码 <a class="header-anchor" href="#获取远程分支代码" aria-label="Permalink to &quot;获取远程分支代码&quot;">​</a></h2><p>分两种情况：</p><ol><li><p>第一种情况：若远程仓库已存在本地，则直接pull拉取即可。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git pull origin dev # 拉取远程dev分支合并到本地</span></span>
<span class="line"><span style="color:#e1e4e8;">git checkout dev # 可以切换到远程dev分支中继续开发工作</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git pull origin dev # 拉取远程dev分支合并到本地</span></span>
<span class="line"><span style="color:#24292e;">git checkout dev # 可以切换到远程dev分支中继续开发工作</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>第二种情况，本地没有远程仓库，则先克隆clone，在pull拉取。 克隆的仓库默认仅有master分支</p></li></ol><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">git clone 仓库地址 </span></span>
<span class="line"><span style="color:#e1e4e8;">git pull origin dev # 拉取远程（origin）中的dev分支</span></span>
<span class="line"><span style="color:#e1e4e8;">git checkout dev	# 可以切换到远程dev分支中继续开发工作</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">git clone 仓库地址 </span></span>
<span class="line"><span style="color:#24292e;">git pull origin dev # 拉取远程（origin）中的dev分支</span></span>
<span class="line"><span style="color:#24292e;">git checkout dev	# 可以切换到远程dev分支中继续开发工作</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h1 id="github相关功能说明" tabindex="-1">github相关功能说明 <a class="header-anchor" href="#github相关功能说明" aria-label="Permalink to &quot;github相关功能说明&quot;">​</a></h1><ul><li><p>fork克隆操作：可以把别人的项目fork（理解为复制）到自己的用户名下面</p></li><li><p>issue：给项目提问题建议，这样一个开源项目就会变得越来越完善健壮。</p></li><li><p>pull request: 。如果一个开源项目有bug，你可以帮他修复完善。就需要发一个pr请求。</p><ul><li><p>发一个pr请求步骤：</p><ol><li><p>fork下来 ，克隆到本地进行修改并提交。</p></li><li><p>点击pull request即可</p></li><li><p>项目原作者会收到pr请求，如果没问题，项目作者会把此请求合并merge合并到项目中。</p><p>合并成功之后，你就是这个开源项目的贡献者了！，面试时候是个亮点</p></li></ol></li></ul></li></ul><h1 id="github使用技巧分享" tabindex="-1">github使用技巧分享 <a class="header-anchor" href="#github使用技巧分享" aria-label="Permalink to &quot;github使用技巧分享&quot;">​</a></h1><ol><li><strong>github代码搜索技巧</strong></li></ol><p>如：github输入框中，找出点赞数超过100，且名字含有vue字样仓库的。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">vue stars:&gt;100</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">vue stars:&gt;100</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如：在后缀名为<code>.js</code>的文件，找出getBoundClientRect的使用。这种特别是在查找api如何使用时特别有用。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">getBoundClientRect filename:*.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">getBoundClientRect filename:*.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>找使用用js写的放大镜相关的项目,</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">zoom language:js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">zoom language:js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>找使用用js写的放大镜相关的项目,且仓库点赞数超过2000（2k）</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">zoom language:js stars:&gt;2000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">zoom language:js stars:&gt;2000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>参考：<a href="https://github.com/search/advanced" target="_blank" rel="noreferrer">https://github.com/search/advanced</a> ： 表单可视化形式，可生成高级查询条件</p><p><strong>2. 看仓库源代码技巧</strong></p><p>进入github某个仓库，直接输入字符<code>.</code>即可打开在线版的vscode查看源码，非常方便。</p><blockquote><p>前提要登录github</p></blockquote>`,235),k=[y];function C(f,q,E,_,w,x){return e(),a("div",null,k)}const S=s(v,[["render",C]]);export{j as __pageData,S as default};
