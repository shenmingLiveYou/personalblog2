import{_ as s,o as l,c as a,Q as n}from"./chunks/framework.cfbd61a4.js";const h=JSON.parse('{"title":"组件间通信方案","description":"","frontmatter":{},"headers":[],"relativePath":"pages/vue/vue2_api.md","filePath":"pages/vue/vue2_api.md","lastUpdated":null}'),p={name:"pages/vue/vue2_api.md"},e=n(`<h1 id="组件间通信方案" tabindex="-1">组件间通信方案 <a class="header-anchor" href="#组件间通信方案" aria-label="Permalink to &quot;组件间通信方案&quot;">​</a></h1><h2 id="一、常用的通信方案-熟练掌握" tabindex="-1">一、常用的通信方案（熟练掌握） <a class="header-anchor" href="#一、常用的通信方案-熟练掌握" aria-label="Permalink to &quot;一、常用的通信方案（熟练掌握）&quot;">​</a></h2><h2 id="_1-props" tabindex="-1">1. props <a class="header-anchor" href="#_1-props" aria-label="Permalink to &quot;1. props&quot;">​</a></h2><ol><li>适用场景：<code>父 -&gt; 子</code></li><li>用法：</li></ol><ul><li>父组件以标签属性方式给子组件传递数据</li></ul><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">Child</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">xxx</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">xxx</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">Child</span><span style="color:#24292E;"> :</span><span style="color:#6F42C1;">xxx</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">xxx</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>子组件声明接受 props</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">props</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">xxx</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">: Xxx,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">required</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">props</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">xxx</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">: Xxx,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">required</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>子组件使用</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.xxx;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.xxx;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_2-自定义事件" tabindex="-1">2. 自定义事件 <a class="header-anchor" href="#_2-自定义事件" aria-label="Permalink to &quot;2. 自定义事件&quot;">​</a></h2><ol><li><p>适用场景：<code>子 -&gt; 父</code></p></li><li><p>概念：</p></li></ol><ul><li>所有给组件绑定的事件，都是自定义事件</li><li>如果希望给组件绑定 DOM 事件，需要加上事件修饰符.native</li></ul><ol start="3"><li>用法</li></ol><ul><li>父组件给子组件绑定事件</li></ul><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">Child</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">xxx</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">xxx</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">Child</span><span style="color:#24292E;"> @</span><span style="color:#6F42C1;">xxx</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">xxx</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>子组件触发事件，执行回调函数，从而更新父组件数据</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;xxx&quot;</span><span style="color:#E1E4E8;">, 参数1, 参数2);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;xxx&quot;</span><span style="color:#24292E;">, 参数1, 参数2);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_3-v-bind-xxx-sync" tabindex="-1">3. v-bind:xxx.sync <a class="header-anchor" href="#_3-v-bind-xxx-sync" aria-label="Permalink to &quot;3. v-bind:xxx.sync&quot;">​</a></h2><ol><li>适用场景：<code>父 &lt;-&gt; 子</code></li></ol><ul><li>主要用于非表单项</li><li>一个组件可以绑定多个</li></ul><ol start="2"><li>用法</li></ol><ul><li>父组件以.sync 绑定数据</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 1. 传递xxx数据 --&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 2. 绑定update:xxx自定义事件 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#FDAEB7;font-style:italic;">Child</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:xxx.sync</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;xxx&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 1. 传递xxx数据 --&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 2. 绑定update:xxx自定义事件 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#B31D28;font-style:italic;">Child</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:xxx.sync</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;xxx&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>子组件声明接受数据</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">props</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">xxx</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">: Xxx,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">required</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">props</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">xxx</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">: Xxx,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">required</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>子组件使用数据</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.xxx;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.xxx;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>子组件触发自定义事件，执行回调函数，回调函数中更新父组件数据</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;update:xxx&quot;</span><span style="color:#E1E4E8;">, 参数);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;update:xxx&quot;</span><span style="color:#24292E;">, 参数);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_4-v-model" tabindex="-1">4. v-model <a class="header-anchor" href="#_4-v-model" aria-label="Permalink to &quot;4. v-model&quot;">​</a></h3><ol><li>适用场景：<code>父 &lt;-&gt; 子</code></li></ol><ul><li>主要用于表单项</li><li>一个组件只能绑定一个</li></ul><ol start="2"><li>用法</li></ol><ul><li>父组件以 v-model 绑定数据</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 1. 绑定value数据 --&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 2. 绑定input自定义事件 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#FDAEB7;font-style:italic;">Child</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-model</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;xxx&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 1. 绑定value数据 --&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 2. 绑定input自定义事件 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#B31D28;font-style:italic;">Child</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-model</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;xxx&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>子组件声明接受数据</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">props</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">: Xxx,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">required</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">props</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">: Xxx,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">required</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>子组件使用数据</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.value;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.value;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>子组件触发自定义事件，执行回调函数，回调函数中更新父组件数据</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;input&quot;</span><span style="color:#E1E4E8;">, 参数);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">$emit</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;input&quot;</span><span style="color:#24292E;">, 参数);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_5-v-slot" tabindex="-1">5. v-slot <a class="header-anchor" href="#_5-v-slot" aria-label="Permalink to &quot;5. v-slot&quot;">​</a></h3><ol><li>适用场景：<code>父 &lt;-&gt; 子</code></li></ol><ul><li>通信标签数据</li></ul><ol start="2"><li>用法</li></ol><ul><li><p>默认插槽</p><ul><li>父组件给子组件传递标签数据</li></ul><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">Child</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  xxx</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">Child</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">Child</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  xxx</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">Child</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>子组件使用标签数据</li></ul><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">slot</span><span style="color:#24292E;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>具名插槽</p><p>具名插槽和默认插槽可以一起使用，并且优先最重要的内容使用默认插槽</p><ul><li>父组件给子组件传递标签数据</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#FDAEB7;font-style:italic;">Child</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-slot:xxx</span><span style="color:#E1E4E8;">&gt; xxx &lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">#yyy</span><span style="color:#E1E4E8;">&gt; yyy &lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#FDAEB7;font-style:italic;">Child</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#B31D28;font-style:italic;">Child</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-slot:xxx</span><span style="color:#24292E;">&gt; xxx &lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">#yyy</span><span style="color:#24292E;">&gt; yyy &lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#B31D28;font-style:italic;">Child</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>子组件使用标签数据</li></ul><div class="language-vue vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;xxx&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;yyy&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">slot</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;xxx&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">slot</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;yyy&quot;</span><span style="color:#24292E;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>作用域插槽</p><ul><li><p>子组件给 slot 标签传递数据，最终会传递给父组件</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:xxx</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;xxx&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">/</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;yyy&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:xxx</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;xxx&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#FDAEB7;font-style:italic;">/</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">slot</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:xxx</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;xxx&quot;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">/</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">slot</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;yyy&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:xxx</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;xxx&quot;</span><span style="color:#24292E;"> </span><span style="color:#B31D28;font-style:italic;">/</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>父组件接受作用域插槽数据</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#FDAEB7;font-style:italic;">Child</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">&lt;!-- 默认插槽使用作用域插槽数据 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-slot</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;{ xxx }&quot;</span><span style="color:#E1E4E8;">&gt; xxx &lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">&lt;!-- 具名插槽使用作用域插槽数据 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">#yyy</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;{ xxx }&quot;</span><span style="color:#E1E4E8;">&gt; yyy &lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#FDAEB7;font-style:italic;">Child</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#B31D28;font-style:italic;">Child</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">&lt;!-- 默认插槽使用作用域插槽数据 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-slot</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;{ xxx }&quot;</span><span style="color:#24292E;">&gt; xxx &lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">&lt;!-- 具名插槽使用作用域插槽数据 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">#yyy</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;{ xxx }&quot;</span><span style="color:#24292E;">&gt; yyy &lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#B31D28;font-style:italic;">Child</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul></li></ul><h2 id="_6-vuex" tabindex="-1">6. vuex <a class="header-anchor" href="#_6-vuex" aria-label="Permalink to &quot;6. vuex&quot;">​</a></h2><ol><li>适用场景：<code>兄弟、祖孙</code></li></ol><p>多个组件共享的状态数据</p><ol start="2"><li>组成</li></ol><ul><li>state 管理状态数据对象（给数据一个初始化值）</li><li>getters 管理只读计算属性数据（至少依赖一个/多个 state 数据参与计算）</li><li>actions 用来触发更新的函数对象（往往发送请求/异步操作）</li><li>mutations 用来直接更新数据的函数对象（对数据直接操作）</li><li>namespaced 命名空间（隔离 actions、mutations 的命名空间）</li><li>modules vuex 模块化</li></ul><ol start="3"><li>用法</li></ol><ul><li>定义 vuex 主模块</li><li>主模块暴露 store，store 在 mainjs 应用</li><li>定义 vuex 分模块</li><li>vuex 分模块需要在主模块汇总</li><li>组件使用 vuex 的内容</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 读取state数据：this.$store.state.模块名称.数据名称</span></span>
<span class="line"><span style="color:#6A737D;">// 读取getters数据：this.$store.getters[模块名称/数据名称]</span></span>
<span class="line"><span style="color:#6A737D;">// 触发action函数: this.$store.dispatch(模块名称/action函数名称, 数据)</span></span>
<span class="line"><span style="color:#6A737D;">// 触发mutation函数: this.$store.commit(模块名称/mutation函数名称, 数据)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 读取state数据：this.$store.state.模块名称.数据名称</span></span>
<span class="line"><span style="color:#6A737D;">// 读取getters数据：this.$store.getters[模块名称/数据名称]</span></span>
<span class="line"><span style="color:#6A737D;">// 触发action函数: this.$store.dispatch(模块名称/action函数名称, 数据)</span></span>
<span class="line"><span style="color:#6A737D;">// 触发mutation函数: this.$store.commit(模块名称/mutation函数名称, 数据)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">computed</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">mapState</span><span style="color:#E1E4E8;">(模块名称, [数据名称]),</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">mapGetters</span><span style="color:#E1E4E8;">(模块名称, [数据名称]),</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#B392F0;">methods</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">mapActions</span><span style="color:#E1E4E8;">(模块名称, [函数名称]),</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">mapMutations</span><span style="color:#E1E4E8;">(模块名称, [函数名称]),</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">computed</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">mapState</span><span style="color:#24292E;">(模块名称, [数据名称]),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">mapGetters</span><span style="color:#24292E;">(模块名称, [数据名称]),</span></span>
<span class="line"><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#6F42C1;">methods</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">mapActions</span><span style="color:#24292E;">(模块名称, [函数名称]),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">mapMutations</span><span style="color:#24292E;">(模块名称, [函数名称]),</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="二、不常用的通信方案-了解" tabindex="-1">二、不常用的通信方案（了解） <a class="header-anchor" href="#二、不常用的通信方案-了解" aria-label="Permalink to &quot;二、不常用的通信方案（了解）&quot;">​</a></h2><h2 id="_1-全局事件总线" tabindex="-1">1. 全局事件总线 <a class="header-anchor" href="#_1-全局事件总线" aria-label="Permalink to &quot;1. 全局事件总线&quot;">​</a></h2><ol><li>适用场景：<code>兄弟、祖孙</code></li></ol><ul><li>通信的两个组件必须都存在才能通信（路由组件不能使用全局事件总线）</li></ul><ol start="2"><li>用法</li></ol><ul><li>配置</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 方式一</span></span>
<span class="line"><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.$bus </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vue</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 方式二</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vue</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">beforeCreate</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.$bus </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 方式一</span></span>
<span class="line"><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.$bus </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vue</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 方式二</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vue</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">beforeCreate</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.$bus </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>绑定事件（接受数据方）</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">mounted</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 绑定事件</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$bus.</span><span style="color:#B392F0;">$on</span><span style="color:#E1E4E8;">(事件名称, 回调函数);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 绑定一次性事件</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$bus.</span><span style="color:#B392F0;">$once</span><span style="color:#E1E4E8;">(事件名称, 回调函数);</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#B392F0;">beforeDestroy</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 解绑事件</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$bus.</span><span style="color:#B392F0;">$off</span><span style="color:#E1E4E8;">(事件名称, 回调函数);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">mounted</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 绑定事件</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$bus.</span><span style="color:#6F42C1;">$on</span><span style="color:#24292E;">(事件名称, 回调函数);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 绑定一次性事件</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$bus.</span><span style="color:#6F42C1;">$once</span><span style="color:#24292E;">(事件名称, 回调函数);</span></span>
<span class="line"><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#6F42C1;">beforeDestroy</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 解绑事件</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$bus.</span><span style="color:#6F42C1;">$off</span><span style="color:#24292E;">(事件名称, 回调函数);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>触发事件（发送数据方）</li></ul><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$bus.</span><span style="color:#B392F0;">$emit</span><span style="color:#E1E4E8;">(事件名称, 参数);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">this</span><span style="color:#24292E;">.$bus.</span><span style="color:#6F42C1;">$emit</span><span style="color:#24292E;">(事件名称, 参数);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_2-attrs-listeners" tabindex="-1">2. <code>$attrs/$listeners</code> <a class="header-anchor" href="#_2-attrs-listeners" aria-label="Permalink to &quot;2. \`$attrs/$listeners\`&quot;">​</a></h2><ol><li><code>$attrs</code> 所有未声明接受的属性数据</li><li><code>$listeners</code> 所有自定义事件数据</li></ol><h3 id="_3-refs-parent-children" tabindex="-1">3. <code>$refs/$parent/$children</code> <a class="header-anchor" href="#_3-refs-parent-children" aria-label="Permalink to &quot;3. \`$refs/$parent/$children\`&quot;">​</a></h3><ol><li><p><code>$parent</code> 当前组件的父组件实例对象</p></li><li><p><code>$children</code> 当前组件的子组件实例对象数组</p></li></ol><ul><li>需要注意 $children 并不保证顺序，也不是响应式的</li><li>这个属性不建议使用</li></ul><ol start="3"><li><code>$refs</code></li></ol><ul><li>给 DOM 元素绑定 ref 得到 DOM 元素对象</li><li>给组件绑定 ref 得到组件实例对象</li></ul><h2 id="三、vue组件通信方式总结-2" tabindex="-1">三、Vue组件通信方式总结(2) <a class="header-anchor" href="#三、vue组件通信方式总结-2" aria-label="Permalink to &quot;三、Vue组件通信方式总结(2)&quot;">​</a></h2><ol><li><h2 id="props" tabindex="-1">props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;props&quot;">​</a></h2><ol><li>使用场景:父子组件通信</li><li>父向子传 <ol><li>父组件在子组件的标签上,<strong>添加标签属性</strong>,并将需要传递的数据放在标签属性值中</li><li>子组件想要接收数据,需要<strong>在配置对象中,添加props配置选项</strong>,来声明想要接收哪些数据</li><li>子组件即可将接收到的数据,当作自己的数据使用,但是不允许修改</li><li><strong>总结:父传子,父亲传的是数据本身</strong></li></ol></li><li>子向父传 <ol><li>父组件在子组件的标签上,<strong>添加标签属性</strong>,并将需要传递的函数放在标签属性值中</li><li>子组件想要接收数据,需要<strong>在配置对象中,添加props配置选项</strong>,来声明想要接收哪些数据</li><li>子组件调用接收到的函数,并向内部传入实参</li><li>最终执行函数的代码,会修改父组件的状态数据,实现子向父传参 <ol><li><strong>注意:传下来的函数,必须在methods中,声明,因为methods的函数this都会被使用bind强行改成父组件的组件实例对象</strong></li></ol></li><li><strong>总结:子传父,父亲传的是用来接收数据的函数</strong></li></ol></li></ol></li><li><h2 id="provide-inject" tabindex="-1">provide/inject <a class="header-anchor" href="#provide-inject" aria-label="Permalink to &quot;provide/inject&quot;">​</a></h2><ol><li>使用场景:祖孙组件之间</li><li>暴露数据 <ol><li>祖先组件在自己的配置对象中,添加provide属性,属性值类型为对象,可以将需要暴露的数据以属性名和属性值的格式,写在provide对象即可</li></ol></li><li>获取数据 <ol><li>后代组件在自己的配置对象中,添加inject属性,属性值类型string[ ],可以接收到指定属性名的数据</li></ol></li><li>注意: <ol><li>provide暴露的数据,本身是非响应式的,如果想要有响应式效果,需要自己处理该数据</li><li>provide如果使用函数写法,就可以读取data中的数据,来向外暴露,可以实现数据的灵活性</li><li>如果想让provide暴露的数据是响应式的,可以将对象放在data中先处理之后,在用provide暴露</li></ol></li></ol></li><li><h2 id="自定义事件" tabindex="-1">自定义事件 <a class="header-anchor" href="#自定义事件" aria-label="Permalink to &quot;自定义事件&quot;">​</a></h2><ol><li><h3 id="使用场景-子向父传参" tabindex="-1">使用场景:子向父传参 <a class="header-anchor" href="#使用场景-子向父传参" aria-label="Permalink to &quot;使用场景:子向父传参&quot;">​</a></h3></li><li><h3 id="面试题-区分原生事件和自定义事件" tabindex="-1">面试题:区分原生事件和自定义事件 <a class="header-anchor" href="#面试题-区分原生事件和自定义事件" aria-label="Permalink to &quot;面试题:区分原生事件和自定义事件&quot;">​</a></h3><ol><li><h4 id="原生事件-其实就是一阶段所学的dom事件" tabindex="-1">原生事件:其实就是一阶段所学的DOM事件 <a class="header-anchor" href="#原生事件-其实就是一阶段所学的dom事件" aria-label="Permalink to &quot;原生事件:其实就是一阶段所学的DOM事件&quot;">​</a></h4><ol><li><h4 id="原生dom事件的事件名都是由w3c机构制定的" tabindex="-1">原生DOM事件的事件名都是由W3C机构制定的 <a class="header-anchor" href="#原生dom事件的事件名都是由w3c机构制定的" aria-label="Permalink to &quot;原生DOM事件的事件名都是由W3C机构制定的&quot;">​</a></h4></li></ol></li><li><h4 id="自定义事件-其实是vue专门给组件通信提供的新型事件" tabindex="-1">自定义事件:其实是Vue专门给组件通信提供的新型事件 <a class="header-anchor" href="#自定义事件-其实是vue专门给组件通信提供的新型事件" aria-label="Permalink to &quot;自定义事件:其实是Vue专门给组件通信提供的新型事件&quot;">​</a></h4><ol><li><h4 id="自定义事件的事件名是由开发者自己制定的" tabindex="-1">自定义事件的事件名是由开发者自己制定的 <a class="header-anchor" href="#自定义事件的事件名是由开发者自己制定的" aria-label="Permalink to &quot;自定义事件的事件名是由开发者自己制定的&quot;">​</a></h4></li></ol></li></ol></li><li><h3 id="面试题2-如何区分一个事件是原生事件还是自定义事件" tabindex="-1">面试题2:如何区分一个事件是原生事件还是自定义事件? <a class="header-anchor" href="#面试题2-如何区分一个事件是原生事件还是自定义事件" aria-label="Permalink to &quot;面试题2:如何区分一个事件是原生事件还是自定义事件?&quot;">​</a></h3><ol><li><h4 id="如果事件是绑定在原生dom标签上的-那么一定是原生事件" tabindex="-1">如果事件是绑定在原生DOM标签上的,那么一定是原生事件 <a class="header-anchor" href="#如果事件是绑定在原生dom标签上的-那么一定是原生事件" aria-label="Permalink to &quot;如果事件是绑定在原生DOM标签上的,那么一定是原生事件&quot;">​</a></h4></li><li><h4 id="如果事件是绑定在组件标签上的-那么一定是自定义事件" tabindex="-1">如果事件是绑定在组件标签上的,那么一定是自定义事件 <a class="header-anchor" href="#如果事件是绑定在组件标签上的-那么一定是自定义事件" aria-label="Permalink to &quot;如果事件是绑定在组件标签上的,那么一定是自定义事件&quot;">​</a></h4><ol><li><h4 id="原因-因为组件标签浏览器不认识-最终显示在页面上的-其实是组件内部的template内容" tabindex="-1">原因:因为组件标签浏览器不认识,最终显示在页面上的,其实是组件内部的template内容 <a class="header-anchor" href="#原因-因为组件标签浏览器不认识-最终显示在页面上的-其实是组件内部的template内容" aria-label="Permalink to &quot;原因:因为组件标签浏览器不认识,最终显示在页面上的,其实是组件内部的template内容&quot;">​</a></h4></li><li><h4 id="可以在绑定自定义事件的时候-加上修饰符-native-就可以将该事件转为原生事件-并绑定在当前组件的根节点上" tabindex="-1">可以在绑定自定义事件的时候,加上修饰符.native,就可以将该事件转为原生事件,并绑定在当前组件的根节点上 <a class="header-anchor" href="#可以在绑定自定义事件的时候-加上修饰符-native-就可以将该事件转为原生事件-并绑定在当前组件的根节点上" aria-label="Permalink to &quot;可以在绑定自定义事件的时候,加上修饰符.native,就可以将该事件转为原生事件,并绑定在当前组件的根节点上&quot;">​</a></h4></li></ol></li></ol></li><li><p>四个基础API</p><ol><li>$on-&gt;可以给某个组件实例,绑定自定义事件以及事件处理器</li><li>$once-&gt;可以给某个组件实例,绑定自定义事件以及事件处理器,但是这个事件只能触发一次 <ol><li>触发一次之后,会自动解绑</li></ol></li><li>$emit-&gt;可以触发某个组件实例身上的某类事件</li><li>$off-&gt;可以移除某个实例对象身上的事件 <ol><li>如果没有传入任何参数,就代表移除当前实例对象上所有的事件</li><li>如果只传入一个参数,就代表移除当前实例对象上对应类型的事件,以及他所有的事件处理器</li><li>如果传入两个参数,就代表溢出当前实例对象上对应类型事件中,对应的事件处理器</li></ol></li></ol></li><li><p>v-model指令(双向数据绑定)</p><ol><li><p>对input标签使用</p><ol><li><p>将data中的状态数据,作为默认值,显示在input框中(<strong>属性名value</strong>)</p></li><li><p>当用户修改input框的数据时,会自动修改data中对应的状态属性(<strong>事件名是input</strong>)</p></li><li><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">input</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;msg&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">@input</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;msg=$event.target.value&quot;</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">input</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">type</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;text&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;msg&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">@input</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;msg=$event.target.value&quot;</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol></li><li><p>对组件标签使用</p><ol><li><p>将data中的状态数据,作为标签属性传给子组件(<strong>默认属性名value</strong>)</p><ol><li>同时还会给子组件绑定一个自定义事件(<strong>默认事件名input</strong>)</li></ol></li><li><p>子组件可以通过自定义事件,来修改父组件的数据</p></li><li><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#FDAEB7;font-style:italic;">HelloWorld</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;msg&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">@input</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;(data)=&gt;msg=data&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#B31D28;font-style:italic;">HelloWorld</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">:value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;msg&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">@input</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;(data)=&gt;msg=data&quot;</span><span style="color:#24292E;">/&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>注意:<strong>默认属性名和事件名都是可以通过model属性进行配置修改的</strong></p></li></ol></li></ol></li><li><p>.sync修饰符</p><ol><li>通过标签属性的形式,将数据传递给子组件使用(标签属性名自定义)</li><li>子组件中,声明props,来接收父组件传下来的数据</li><li>子组件可以通过触发自定义事件,来修改父组件的数据(事件名: update:属性名)</li><li><strong>注意:在Vue3中.v-model和sync修饰符二合一了,最终语法使用的是v-model的语法,事件名使用的是sync的事件名</strong></li></ol></li><li><p>全局事件总线</p><ol><li><p>角色</p><ol><li>订阅者-&gt;想要接收数据的人</li><li>发布者-&gt;有数据的人(想要发送数据的人)</li></ol></li><li><p>操作</p><ol><li>订阅</li><li>发布</li><li>取消订阅</li></ol></li><li><p>约束</p><ol><li>订阅者和发布者必须同时存在</li><li>订阅操作必须在发布之前</li></ol></li><li><p>流程:</p><ol><li><p>创建一个Vue实例对象,将其保存在Vue的原型对象上,以$bus属性进行保存</p><ol><li><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">Vue</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.$bus </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vue</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">Vue</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.$bus </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Vue</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol></li><li><p>在订阅者的代码中,使用$on去绑定全局事件监听</p><ol><li><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">this.$bus.$on(&#39;abc&#39;,(data)=&gt;{</span></span>
<span class="line"><span style="color:#e1e4e8;">      console.log(&#39;abc&#39;,data)</span></span>
<span class="line"><span style="color:#e1e4e8;">    })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">this.$bus.$on(&#39;abc&#39;,(data)=&gt;{</span></span>
<span class="line"><span style="color:#24292e;">      console.log(&#39;abc&#39;,data)</span></span>
<span class="line"><span style="color:#24292e;">    })</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol></li><li><p>在发布者的代码中,使用$emit去触发全局事件监听</p><ol><li><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">this.$bus.$emit(&#39;abc&#39;,this.msg)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">this.$bus.$emit(&#39;abc&#39;,this.msg)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><p>注意:$bus中,必须存放一个Vue的实例对象,否则后续使用on和emit会报错</p></li></ol></li></ol></li></ol></li><li><h2 id="找到对应组件实例对象" tabindex="-1">找到对应组件实例对象 <a class="header-anchor" href="#找到对应组件实例对象" aria-label="Permalink to &quot;找到对应组件实例对象&quot;">​</a></h2><ol><li>$parent-&gt;找到当前组件的父组件实例对象</li><li>$root-&gt;找到当前组件树的根组件实例对象</li><li>$children-&gt;获取当前所有子组件组成的数组 <ol><li>该数组不具有响应式效果,修改内部对象的排列顺序,不会影响到页面上的展示顺序</li><li>该数组并不能保证排列顺序和书写顺序一致,因为有可能子组件使用到了组件懒加载写法 <ol><li>反过来说,只要子组件没有使用组件懒加载,那么当前children的顺序和书写顺序是一致的</li></ol></li></ol></li><li><strong>$refs-&gt;获取到template中,某个标签的原生DOM或者组件实例</strong><ol><li><strong>如果使用ref标记一个原生DOM标签,那么等下读取到的就是生成DOM节点</strong></li><li><strong>如果使用ref标记一个组件标签,那么读取到的就是他的组件实例对象</strong></li></ol></li></ol></li><li><h2 id="attrs和listeners" tabindex="-1">attrs和listeners <a class="header-anchor" href="#attrs和listeners" aria-label="Permalink to &quot;attrs和listeners&quot;">​</a></h2><ol><li>$attrs-&gt;他会收集当前组件,没有被props接收的标签属性 <ol><li>相当于他就是props的垃圾桶</li><li>他的数据类型是对象</li><li>他会将标签属性的属性名作为自己的属性名 <ol><li>他会将标签属性的属性值作为自己的属性值</li></ol></li></ol></li><li>$listeners-&gt;他会收集当前组件身上,所有的自定义事件 <ol><li>他的数据类型是对象</li><li>他会将自定义事件的名称,作为自己的属性名 <ol><li>将回调函数,作为自己的属性值</li></ol></li></ol></li><li>扩展: <ol><li>v-bind指令 <ol><li>如果传一个对象给他,那么他会将该对象解构展开,对象中所有的属性名都会成为标签属性名,所有的属性值都会成为对应标签属性的属性值</li><li>它可以配合$attrs,实现父组件传下来的数据,给后代组件使用的效果</li></ol></li><li>v-on指令 <ol><li>如果传一个对象给他,那么他会将该对象解构处理,并将对象中的属性名作为事件名称,属性值作为时间回调函数进行绑定</li><li>它可以配合$listeners,实现父组件传下来的事件,给后代组件绑定的效果</li></ol></li></ol></li></ol></li><li><h2 id="插槽" tabindex="-1">插槽 <a class="header-anchor" href="#插槽" aria-label="Permalink to &quot;插槽&quot;">​</a></h2><ol><li>使用场景:如果你想要自定义子组件中的结构,就可以使用插槽</li><li>一共分为3种,他们的都可以传递一段结构</li><li>默认插槽 <ol><li>父组件在子组件的成对标签中,写入一段页面结构 <ol><li>结构是在父组件里面写的,但是会在子组件里面显示</li></ol></li><li>子组件在自己的template中,使用slot组件,来显示传下来的插槽结构</li></ol></li><li>具名插槽 <ol><li>父组件在子组件的成对标签中,写入一段页面结构 <ol><li>父组件可以给插槽结构,使用v-slot指令取一个别名</li></ol></li><li>子组件在自己的template中,使用slot组件,来显示传下来的插槽结构 <ol><li>由于插槽已经具有别名,所以需要给slot组件,添加上name属性,输入对应的别名</li></ol></li><li>扩展:个人认为,默认插槽其实就是名称为default的具名插槽</li></ol></li><li>作用域插槽 <ol><li>父组件在子组件的成对标签中,写入一段页面结构 <ol><li>父组件可以给插槽结构,使用v-slot指令取一个别名</li></ol></li><li>子组件在自己的template中,使用slot组件,来显示传下来的插槽结构 <ol><li>由于插槽已经具有别名,所以需要给slot组件,添加上name属性,输入对应的别名</li></ol></li><li>子组件将需要使用到的数据,通过标签属性的形式,传给slot组件</li><li>插槽可以在#footer之后,添加=&quot;变量名&quot;,即可获取到子组件传递的数据,配合插值语法,来显示传递的数据</li></ol></li><li><strong>以上三种插槽,都只有父传子,没有子传父!!!</strong></li></ol></li></ol>`,76),o=[e];function t(r,i,c,y,E,d){return l(),a("div",null,o)}const b=s(p,[["render",t]]);export{h as __pageData,b as default};
