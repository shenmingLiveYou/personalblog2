import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.cfbd61a4.js";const m=JSON.parse('{"title":"一. 原型相关描述","description":"","frontmatter":{},"headers":[],"relativePath":"interview/interview_js.md","filePath":"interview/interview_js.md","lastUpdated":null}'),p={name:"interview/interview_js.md"},o=l(`<h1 id="一-原型相关描述" tabindex="-1">一. 原型相关描述 <a class="header-anchor" href="#一-原型相关描述" aria-label="Permalink to &quot;一. 原型相关描述&quot;">​</a></h1><h2 id="_1-原型相关的面试题描述" tabindex="-1">1. 原型相关的面试题描述 <a class="header-anchor" href="#_1-原型相关的面试题描述" aria-label="Permalink to &quot;1. 原型相关的面试题描述&quot;">​</a></h2><p>问题：你理解的原型是什么？</p><ol><li><p>原型其实就是两个属性和一个对象。每一个函数都有一个显式原型属性(prototype)，他默认指向一个Object空对象，这个对象称为原型对象。原型对象都有constructor属性指向构造函数本身，每一个实例对象都有一个隐式原型属性(_ _ <em>proto</em> _ _)，他们存在一定的关系，构造函数的显式原型指向实例对象的隐式原型，最终都指向同一个对象，所以当有多个实例对象的时候，可以将共同使用到的数据放到构造函数原型上，这样所有的实例对象都可以共享那些数据，同时也只会存在一个函数，极大的减少了内存的占用。</p></li><li><p>当读取属性时，自身有则使用自身的，没有就通过原型找，最终找到Object的原型，找到则使用，没有找到则返回undefined，这就是原型链查找。</p></li><li><p>在平时写项目的时候使用vue2中全局事件总线就是在原型上添加了一些以$开头的api让我们使用，vue2中也使用了原型，为了让子组件可以访问到父组件的属性和方法</p><p>Vue.prototype === Vuecomponent.prototype._ _ <em>proto</em> _ _</p><p>怎么使用原型？</p><p>可以在原型上添加公共的方法和属性，这样有多个实例对象的话就不会每一个都创建方法和属性，而是都使用原型上的属性或方法，但是最好在创建实例对象之前添加完成，要不然在创建实例对象后再添加就是单独给自身原型上添加方法和属性</p><p>js中对象设置属性时是不走原型链的，如果没有该属性就添加，如果有该属性就修改</p></li></ol><h2 id="_2-当我们new的时候-实际上做了哪些事" tabindex="-1">2. 当我们new的时候，实际上做了哪些事？ <a class="header-anchor" href="#_2-当我们new的时候-实际上做了哪些事" aria-label="Permalink to &quot;2. 当我们new的时候，实际上做了哪些事？&quot;">​</a></h2><ol><li>同步的调用构造函数中的代码</li><li>改变了this的指向，让this指向实例对象</li><li>将实例对象的_ _ <em>proto</em> _ _属性修改成构造函数的prototype属性</li><li>将this做为函数返回值</li></ol><h2 id="_3-如何判断数据类型" tabindex="-1">3. 如何判断数据类型 <a class="header-anchor" href="#_3-如何判断数据类型" aria-label="Permalink to &quot;3. 如何判断数据类型&quot;">​</a></h2><p>我们可以使用typeof对类型进行判断，他会给我们返回明确的数据类型，但是判断不出null和Array和object的类型，他们都会被判断成object类型。</p><p>还可以使用instanceof对类型进行判断，他判断的数据类型非常准确，但是无法给我们返回具体是哪一类型。</p><p>还可以借助原型上toString()方法进行判断</p><h1 id="二-作用域相关描述" tabindex="-1">二. 作用域相关描述 <a class="header-anchor" href="#二-作用域相关描述" aria-label="Permalink to &quot;二. 作用域相关描述&quot;">​</a></h1><h2 id="_1-什么是作用域-作用域包括几种" tabindex="-1">1. 什么是作用域，作用域包括几种？ <a class="header-anchor" href="#_1-什么是作用域-作用域包括几种" aria-label="Permalink to &quot;1. 什么是作用域，作用域包括几种？&quot;">​</a></h2><p>js中只存在词法作用域，不存在动态作用域，</p><p>作用域是一块限制变量可见范围的区域。他分为三种：分别是全局作用域 、局部作用域(函数作用域)和块级作用域 。全局作用域是最大的顶级作用域，任何作用域都可以访问，而局部作用域和块级作用域的大小不一定，当一个变量在当前作用域中没有找到时，就会向外层作用域进行查找，直到全局作用域为止，这就是作用域链查找方式。还有一点就是外层是不能访问作用域内标识的。使用let或者const就会产生块级作用域。</p><h2 id="_2-什么是预解析-预解析分为几种" tabindex="-1">2. 什么是预解析？预解析分为几种？ <a class="header-anchor" href="#_2-什么是预解析-预解析分为几种" aria-label="Permalink to &quot;2.  什么是预解析？预解析分为几种？&quot;">​</a></h2><p>预解析就是将部分代码提前解析。但预解析又分为两种：分别是变量提升和函数提升。 变量提升就是将声明变量的代码放到前面提前执行，只是声明了变量但还未给其赋值，赋值语句留在原地。 函数提升是会将函数在代码执行之前创建，但是函数表达式不会被提前声明。在局部作用域(函数作用域)中，变量提升是不能穿透作用域而提升的，但是在函数作用域中是存在变量提升的。在全局作用域中函数提升优先于变量提升。</p><h2 id="_3-形参默认值" tabindex="-1">3. 形参默认值 <a class="header-anchor" href="#_3-形参默认值" aria-label="Permalink to &quot;3. 形参默认值&quot;">​</a></h2><p>当给函数添加了形参默认值，那么形参依然在函数作用域，而函数内的代码为块级作用域。</p><p>如果函数的形参和函数内部的某个变量名称相同，则会共用这个初始值。</p><h1 id="三-闭包相关描述" tabindex="-1">三. 闭包相关描述 <a class="header-anchor" href="#三-闭包相关描述" aria-label="Permalink to &quot;三. 闭包相关描述&quot;">​</a></h1><h2 id="_1-什么是闭包-闭包是如何产生的-闭包有什么作用-在哪里有用过闭包" tabindex="-1">1. 什么是闭包？闭包是如何产生的？闭包有什么作用？在哪里有用过闭包？ <a class="header-anchor" href="#_1-什么是闭包-闭包是如何产生的-闭包有什么作用-在哪里有用过闭包" aria-label="Permalink to &quot;1. 什么是闭包？闭包是如何产生的？闭包有什么作用？在哪里有用过闭包？&quot;">​</a></h2><p>闭包是一个包含被引用变量的对象，其实就是一个对象，可以通过chrome调试断点查看。要想产生闭包需要满足两个条件，函数发生嵌套关系和内部函数引用外部函数的标识，这样就产生了一个闭包对象存储着被引用的标识。如果函数未执行则产生的是无效闭包，所以需要执行外部函数并暴露出去才会产生有效闭包，本来当函数调用结束后变量就要被销毁，由于内部函数还引用着这个变量，所以没有被垃圾回收机制回收，这样保存的那个变量就被延长了生命周期，使用闭包还可以实现js模块化保证数据的安全性。闭包在许多地方都有使用到，例如防抖和节流函数，react中的高阶函数，vue中的数据劫持等等.... 但是使用闭包是有一定的缺点，闭包会一直保存着变量而没有被垃圾回收机制回收，从而导致内存泄露。所以我们可以减少使用闭包或者及时释放闭包(让内部函数变为空对象)。</p><h2 id="_2-执行上下文是什么" tabindex="-1">2 .执行上下文是什么？ <a class="header-anchor" href="#_2-执行上下文是什么" aria-label="Permalink to &quot;2 .执行上下文是什么？&quot;">​</a></h2><p>执行上下文,其实包含了当前函数的this指向,return结果,以及一个变量对象。</p><p>当每次调用函数时会创建一个全新的上下文。</p><p>函数代码执行结束后会将对应的执行上下文从执行栈中弹出并销毁。</p><h2 id="_3-垃圾回收机制" tabindex="-1">3. 垃圾回收机制 <a class="header-anchor" href="#_3-垃圾回收机制" aria-label="Permalink to &quot;3. 垃圾回收机制&quot;">​</a></h2><p>在JS中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，当一个对象没有被储存就会被当成垃圾对象被回收，将回收的内存释放</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">垃圾回收机制的核心算法</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">第一种算法</span><span style="color:#E1E4E8;">(旧版):引用计数法</span></span>
<span class="line"><span style="color:#E1E4E8;">                js会给创建的每一个对象,都会添加上一个属性[[count]],初始值为1</span></span>
<span class="line"><span style="color:#E1E4E8;">                    该对象每被一个标识</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">属性引用,那么他的count属性值就会</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">                    该对象每被一个标识</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">属性解除引用,那么他的count属性值就会</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                最终,垃圾回收机制会将count为0的对象进行回收,并将其占用的内存进行释放</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">被淘汰的原因</span><span style="color:#E1E4E8;">(因为有重大BUG)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    如果多个对象互相循环引用的话,那么即便是把存储他们的变量都清空,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        但是由于他们各自之间还在引用对方,会导致这些对象的count属性都不为0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#B392F0;">最终结果</span><span style="color:#E1E4E8;">:我们在代码中,找不到这些对象,但是他们永生了</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">第二种算法</span><span style="color:#E1E4E8;">(新版):</span><span style="color:#B392F0;">标记清除法</span><span style="color:#E1E4E8;">(Scavenger)</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">该算法一共存在两片区域</span><span style="color:#E1E4E8;">:新生代区和老生代区</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">简单总结</span><span style="color:#E1E4E8;">:新版垃圾回收机制,会从window对象身上开始扫描,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        读取他身上所有的对象,如果在扫描过程中,能见到的对象,就说明是需要保留的,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        如果扫描结束之后,from数组中,还存在的对象,就是需要释放的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">新生代区</span><span style="color:#E1E4E8;">(相当于是试用期的员工)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    该区域专门用于存放一些刚创建的新对象</span></span>
<span class="line"><span style="color:#E1E4E8;">                    新生代区分为from和to两个数组</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">首次准备工作</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                        浏览器会先扫描一遍window身上所有的属性,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        如果属性值是一个对象,那么就继续遍历该对象身上所有的属性,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        如果内部的属性还是对象,继续遍历,以此类推</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                        最终将刚才遍历过程中,遇到的所有对象都存入from数组中</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">每个一段时间都会启动一次垃圾回收机制</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                        1.重新开始扫描window身上所有的属性</span></span>
<span class="line"><span style="color:#E1E4E8;">                        2.如果遇到了对象,就将其从from数组中移到to数组中去</span></span>
<span class="line"><span style="color:#E1E4E8;">                        3.如果对象中存有对象,就继续遍历,以此类推</span></span>
<span class="line"><span style="color:#E1E4E8;">                        4.最终当所有的属性都遍历结束之后,from数组中,还遗留的对象就是需要回收的对象</span></span>
<span class="line"><span style="color:#E1E4E8;">                        5.垃圾回收机制就会将from数组中,还遗留的对象占用的内存全部释放掉</span></span>
<span class="line"><span style="color:#E1E4E8;">                        6.将to数组变成from数组,from数组变成to数组</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">算法目的</span><span style="color:#E1E4E8;">:以空间换时间</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">老生代区</span><span style="color:#E1E4E8;">(相当于是正式员工)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    该区域专门用于存放一些存活时间比较久的老对象</span></span>
<span class="line"><span style="color:#E1E4E8;">                    老生代区只有一个数组</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">问题</span><span style="color:#E1E4E8;">:一个对象如何变成老生代区的对象</span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">                    回答</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">一个对象如果在to数组中出现三次,那么他就会成为老生代区的对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">流程</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">                        1.重新开始扫描window身上所有的属性</span></span>
<span class="line"><span style="color:#E1E4E8;">                        2.如果发现扫描到的对象,已经存在于老生代区中,就会给其打上一个标记</span></span>
<span class="line"><span style="color:#E1E4E8;">                            当所有的属性都遍历结束之后,身上没有标记的对象,就是需要回收的对象</span></span>
<span class="line"><span style="color:#E1E4E8;">                        3.此时垃圾回收机制,会遍历老生代区的数组,将内部没有标记的对象,全部释放</span></span>
<span class="line"><span style="color:#E1E4E8;">                        4.等无用对象都被释放掉之后,会再次遍历老生代区数组,重新整理排列内部对象的排列位置</span></span>
<span class="line"><span style="color:#E1E4E8;">                            将多余的内存空间,全部组合到最后去</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">算法目的</span><span style="color:#E1E4E8;">:以时间换空间</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">垃圾回收机制的核心算法</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">第一种算法</span><span style="color:#24292E;">(旧版):引用计数法</span></span>
<span class="line"><span style="color:#24292E;">                js会给创建的每一个对象,都会添加上一个属性[[count]],初始值为1</span></span>
<span class="line"><span style="color:#24292E;">                    该对象每被一个标识</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">属性引用,那么他的count属性值就会</span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">                    该对象每被一个标识</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">属性解除引用,那么他的count属性值就会</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                最终,垃圾回收机制会将count为0的对象进行回收,并将其占用的内存进行释放</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">被淘汰的原因</span><span style="color:#24292E;">(因为有重大BUG)</span></span>
<span class="line"><span style="color:#24292E;">                    如果多个对象互相循环引用的话,那么即便是把存储他们的变量都清空,</span></span>
<span class="line"><span style="color:#24292E;">                        但是由于他们各自之间还在引用对方,会导致这些对象的count属性都不为0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6F42C1;">最终结果</span><span style="color:#24292E;">:我们在代码中,找不到这些对象,但是他们永生了</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">第二种算法</span><span style="color:#24292E;">(新版):</span><span style="color:#6F42C1;">标记清除法</span><span style="color:#24292E;">(Scavenger)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">该算法一共存在两片区域</span><span style="color:#24292E;">:新生代区和老生代区</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">简单总结</span><span style="color:#24292E;">:新版垃圾回收机制,会从window对象身上开始扫描,</span></span>
<span class="line"><span style="color:#24292E;">                        读取他身上所有的对象,如果在扫描过程中,能见到的对象,就说明是需要保留的,</span></span>
<span class="line"><span style="color:#24292E;">                        如果扫描结束之后,from数组中,还存在的对象,就是需要释放的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">新生代区</span><span style="color:#24292E;">(相当于是试用期的员工)</span></span>
<span class="line"><span style="color:#24292E;">                    该区域专门用于存放一些刚创建的新对象</span></span>
<span class="line"><span style="color:#24292E;">                    新生代区分为from和to两个数组</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">首次准备工作</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                        浏览器会先扫描一遍window身上所有的属性,</span></span>
<span class="line"><span style="color:#24292E;">                        如果属性值是一个对象,那么就继续遍历该对象身上所有的属性,</span></span>
<span class="line"><span style="color:#24292E;">                        如果内部的属性还是对象,继续遍历,以此类推</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                        最终将刚才遍历过程中,遇到的所有对象都存入from数组中</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">每个一段时间都会启动一次垃圾回收机制</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                        1.重新开始扫描window身上所有的属性</span></span>
<span class="line"><span style="color:#24292E;">                        2.如果遇到了对象,就将其从from数组中移到to数组中去</span></span>
<span class="line"><span style="color:#24292E;">                        3.如果对象中存有对象,就继续遍历,以此类推</span></span>
<span class="line"><span style="color:#24292E;">                        4.最终当所有的属性都遍历结束之后,from数组中,还遗留的对象就是需要回收的对象</span></span>
<span class="line"><span style="color:#24292E;">                        5.垃圾回收机制就会将from数组中,还遗留的对象占用的内存全部释放掉</span></span>
<span class="line"><span style="color:#24292E;">                        6.将to数组变成from数组,from数组变成to数组</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">算法目的</span><span style="color:#24292E;">:以空间换时间</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">老生代区</span><span style="color:#24292E;">(相当于是正式员工)</span></span>
<span class="line"><span style="color:#24292E;">                    该区域专门用于存放一些存活时间比较久的老对象</span></span>
<span class="line"><span style="color:#24292E;">                    老生代区只有一个数组</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">问题</span><span style="color:#24292E;">:一个对象如何变成老生代区的对象</span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">                    回答</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">一个对象如果在to数组中出现三次,那么他就会成为老生代区的对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">流程</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">                        1.重新开始扫描window身上所有的属性</span></span>
<span class="line"><span style="color:#24292E;">                        2.如果发现扫描到的对象,已经存在于老生代区中,就会给其打上一个标记</span></span>
<span class="line"><span style="color:#24292E;">                            当所有的属性都遍历结束之后,身上没有标记的对象,就是需要回收的对象</span></span>
<span class="line"><span style="color:#24292E;">                        3.此时垃圾回收机制,会遍历老生代区的数组,将内部没有标记的对象,全部释放</span></span>
<span class="line"><span style="color:#24292E;">                        4.等无用对象都被释放掉之后,会再次遍历老生代区数组,重新整理排列内部对象的排列位置</span></span>
<span class="line"><span style="color:#24292E;">                            将多余的内存空间,全部组合到最后去</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">算法目的</span><span style="color:#24292E;">:以时间换空间</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br></div></div><h1 id="四-关于this的指向描述" tabindex="-1">四. 关于this的指向描述 <a class="header-anchor" href="#四-关于this的指向描述" aria-label="Permalink to &quot;四. 关于this的指向描述&quot;">​</a></h1><h2 id="_1-说说对this的理解" tabindex="-1">1. 说说对this的理解？ <a class="header-anchor" href="#_1-说说对this的理解" aria-label="Permalink to &quot;1. 说说对this的理解？&quot;">​</a></h2><p>好的，面试官。解析器在调用函数时每次都会向函数内部传递进一个隐含的参数,这个隐含参数就是this，根据函数调用方式的不同，this指向的对象也不同。当函数在全局作用域中被调用，则this指向全局对象window，如果开启了严格模式则this指向undefined。如果函数是作为对象的方法调用，this将指向该对象。如果函数作为构造函数被调用，this将指向创建出来的全新的实例对象。如果函数是通过call()、apply()或bind()方法显式调用，this将指向传递的第一个参数对象。还存在着一些特殊的this指向，比如事件回调函数中的this指向事件源等等。。</p><h2 id="_2-谈谈箭头函数" tabindex="-1">2. 谈谈箭头函数 <a class="header-anchor" href="#_2-谈谈箭头函数" aria-label="Permalink to &quot;2. 谈谈箭头函数&quot;">​</a></h2><p>箭头函数是ES6新增的特性，他其实是声明函数时的一个语法糖，但和普通声明的函数又有区别，箭头函数的this跟声明位置有关系，与调用方式无关 ，箭头函数没有属于自己的this,当函数使用到this时会向外部作用域进行查找使用。call()、apply()、bind()方法无法强行改变其this指向，因为箭头函数没有自己的this，而且还能被构造调用，因为箭头函数不是一个构造器，所以没有属于自己的原型对象。</p><h2 id="_3-call、apply、bind的区别是什么" tabindex="-1">3. call、apply、bind的区别是什么？ <a class="header-anchor" href="#_3-call、apply、bind的区别是什么" aria-label="Permalink to &quot;3. call、apply、bind的区别是什么？&quot;">​</a></h2><p>好的，面试官。三者都可以传入第一个参数来强行改变被借调函数this的指向，如果不传入第一个实参则被借调函数的this指向window。call和apply方法的原理其实是一样的，区别就在于传递参数的方式不同，call需要一个一个传，apply是传递一个数组。而且call和apply都会立即调用被调函数，而bind是返回一个已经修改this指向后的新函数，如果要触发该方法，我们需要手动调用。call和aplly方法修改this只会影响到本轮执行的this指向，而bind方法会永久返回新函数的this指向。</p><h2 id="_4-实现手写call方法" tabindex="-1">4. 实现手写call方法 <a class="header-anchor" href="#_4-实现手写call方法" aria-label="Permalink to &quot;4. 实现手写call方法&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">z</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">,x,y,z)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">y</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">z</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">Function</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">myCall</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">thatThis</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">            this-&gt;被借调函数fn</span></span>
<span class="line"><span style="color:#6A737D;">            thatThis-&gt;需要强行改变的this指向 obj对象</span></span>
<span class="line"><span style="color:#6A737D;">        */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果thatThis值是undefined或者null,就会进入该判断</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 我们就会将被借调函数的this改成window对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// undefined和null只有他们两个人互相对等,与其他人都不相等</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// if(thatThis === null ||thatThis === undefined){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(thatThis </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            thatThis </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> thatThis</span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;">&quot;number&quot;</span><span style="color:#F97583;">||typeof</span><span style="color:#E1E4E8;"> thatThis</span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;">&quot;string&quot;</span><span style="color:#F97583;">||typeof</span><span style="color:#E1E4E8;"> thatThis</span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;">&quot;boolean&quot;</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            thatThis </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">(thatThis);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 将需要执行的被借调函数,放在指定的thatThis对象上</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 目的是为了让后面调用被借调函数的时候,this对象是这个thatThis</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// thatThis._fn = this;</span></span>
<span class="line"><span style="color:#E1E4E8;">        thatThis.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;">._fn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> thatThis.</span><span style="color:#B392F0;">_fn</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">args);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 收尾工作,将临时添加的属性,删掉,防止影响用户原本的代码</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// delete thatThis._fn</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;"> thatThis.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;">._fn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fn.</span><span style="color:#B392F0;">myCall</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">56</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,result)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">x</span><span style="color:#24292E;">,</span><span style="color:#E36209;">y</span><span style="color:#24292E;">,</span><span style="color:#E36209;">z</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">,x,y,z)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">y</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">z</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">Function</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">myCall</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">thatThis</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">            this-&gt;被借调函数fn</span></span>
<span class="line"><span style="color:#6A737D;">            thatThis-&gt;需要强行改变的this指向 obj对象</span></span>
<span class="line"><span style="color:#6A737D;">        */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果thatThis值是undefined或者null,就会进入该判断</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 我们就会将被借调函数的this改成window对象</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// undefined和null只有他们两个人互相对等,与其他人都不相等</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// if(thatThis === null ||thatThis === undefined){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(thatThis </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            thatThis </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> thatThis</span><span style="color:#D73A49;">===</span><span style="color:#032F62;">&quot;number&quot;</span><span style="color:#D73A49;">||typeof</span><span style="color:#24292E;"> thatThis</span><span style="color:#D73A49;">===</span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#D73A49;">||typeof</span><span style="color:#24292E;"> thatThis</span><span style="color:#D73A49;">===</span><span style="color:#032F62;">&quot;boolean&quot;</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            thatThis </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">(thatThis);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 将需要执行的被借调函数,放在指定的thatThis对象上</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 目的是为了让后面调用被借调函数的时候,this对象是这个thatThis</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// thatThis._fn = this;</span></span>
<span class="line"><span style="color:#24292E;">        thatThis.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;">._fn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> thatThis.</span><span style="color:#6F42C1;">_fn</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">args);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 收尾工作,将临时添加的属性,删掉,防止影响用户原本的代码</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// delete thatThis._fn</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> thatThis.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;">._fn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fn.</span><span style="color:#6F42C1;">myCall</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">56</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,result)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h3 id="_5-实现手写apply方法" tabindex="-1">5. 实现手写apply方法 <a class="header-anchor" href="#_5-实现手写apply方法" aria-label="Permalink to &quot;5. 实现手写apply方法&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">([</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">z</span><span style="color:#E1E4E8;">]){</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">,[x,y,z])</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">y</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">z</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      name:</span><span style="color:#9ECBFF;">&#39;xiaoming&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      fun:fn</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">Function</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">myCall</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">thatThis</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//如果没有传递或传递的thatThis为空就让其this指向全局对象window</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(thatThis </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        thatThis </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//当第一个参数为数字或字符串或布尔值就让this指向对应的包装类对象</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> thatThis</span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;">&quot;number&quot;</span><span style="color:#F97583;">||typeof</span><span style="color:#E1E4E8;"> thatThis</span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;">&quot;string&quot;</span><span style="color:#F97583;">||typeof</span><span style="color:#E1E4E8;"> thatThis</span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;">&quot;boolean&quot;</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">          thatThis </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">(thatThis);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//这个this为调用myCall方法的那个函数  因为是fn在调用myCall方法，所以该this指向fn函数，所以this为函数本身</span></span>
<span class="line"><span style="color:#E1E4E8;">      thatThis.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;">._fn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//自调用fn函数的操作</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> thatThis.</span><span style="color:#B392F0;">_fn</span><span style="color:#E1E4E8;">(args)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//删除原型上添加的方法</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;"> thatThis.</span><span style="color:#79B8FF;">__proto__</span><span style="color:#E1E4E8;">._fn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 返回调用的结果</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fn.</span><span style="color:#B392F0;">myCall</span><span style="color:#E1E4E8;">(obj,[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">56</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(result);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">([</span><span style="color:#E36209;">x</span><span style="color:#24292E;">,</span><span style="color:#E36209;">y</span><span style="color:#24292E;">,</span><span style="color:#E36209;">z</span><span style="color:#24292E;">]){</span></span>
<span class="line"><span style="color:#24292E;">      console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">,[x,y,z])</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">y</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">z</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      name:</span><span style="color:#032F62;">&#39;xiaoming&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      fun:fn</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">Function</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">myCall</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">thatThis</span><span style="color:#24292E;">,</span><span style="color:#E36209;">args</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//如果没有传递或传递的thatThis为空就让其this指向全局对象window</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(thatThis </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        thatThis </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//当第一个参数为数字或字符串或布尔值就让this指向对应的包装类对象</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> thatThis</span><span style="color:#D73A49;">===</span><span style="color:#032F62;">&quot;number&quot;</span><span style="color:#D73A49;">||typeof</span><span style="color:#24292E;"> thatThis</span><span style="color:#D73A49;">===</span><span style="color:#032F62;">&quot;string&quot;</span><span style="color:#D73A49;">||typeof</span><span style="color:#24292E;"> thatThis</span><span style="color:#D73A49;">===</span><span style="color:#032F62;">&quot;boolean&quot;</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">          thatThis </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">(thatThis);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//这个this为调用myCall方法的那个函数  因为是fn在调用myCall方法，所以该this指向fn函数，所以this为函数本身</span></span>
<span class="line"><span style="color:#24292E;">      thatThis.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;">._fn </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//自调用fn函数的操作</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> thatThis.</span><span style="color:#6F42C1;">_fn</span><span style="color:#24292E;">(args)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//删除原型上添加的方法</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> thatThis.</span><span style="color:#005CC5;">__proto__</span><span style="color:#24292E;">._fn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 返回调用的结果</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fn.</span><span style="color:#6F42C1;">myCall</span><span style="color:#24292E;">(obj,[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">56</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(result);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h3 id="_6-实现手写bind方法" tabindex="-1">6. 实现手写bind方法 <a class="header-anchor" href="#_6-实现手写bind方法" aria-label="Permalink to &quot;6. 实现手写bind方法&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fn</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">y</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">z</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">,x,y,z)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> x</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">y</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">z</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  name:</span><span style="color:#9ECBFF;">&#39;xiaoming&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  fun:fn</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#79B8FF;">Function</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">myBind</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">thatThis</span><span style="color:#E1E4E8;">,</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">      this-&gt;被借调函数(fn)</span></span>
<span class="line"><span style="color:#6A737D;">      thatThis-&gt;想要强行改变的this指向(obj)</span></span>
<span class="line"><span style="color:#6A737D;">  */</span></span>
<span class="line"><span style="color:#E1E4E8;"> 	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> that </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args2</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> that.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(thatThis,</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">args,</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">args2);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#6A737D;">//fn2是retrun返回的函数</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> fn2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> fn.</span><span style="color:#B392F0;">myBind</span><span style="color:#E1E4E8;">(obj, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">fn2</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">fn2.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(window);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(fn2)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fn</span><span style="color:#24292E;">(</span><span style="color:#E36209;">x</span><span style="color:#24292E;">,</span><span style="color:#E36209;">y</span><span style="color:#24292E;">,</span><span style="color:#E36209;">z</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">,x,y,z)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> x</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">y</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">z</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name:</span><span style="color:#032F62;">&#39;xiaoming&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  fun:fn</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#005CC5;">Function</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">myBind</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">thatThis</span><span style="color:#24292E;">,</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">      this-&gt;被借调函数(fn)</span></span>
<span class="line"><span style="color:#6A737D;">      thatThis-&gt;想要强行改变的this指向(obj)</span></span>
<span class="line"><span style="color:#6A737D;">  */</span></span>
<span class="line"><span style="color:#24292E;"> 	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> that </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">...</span><span style="color:#E36209;">args2</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> that.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(thatThis,</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">args,</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">args2);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6A737D;">//fn2是retrun返回的函数</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> fn2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> fn.</span><span style="color:#6F42C1;">myBind</span><span style="color:#24292E;">(obj, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">fn2</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">fn2.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(window);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(fn2)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="_7-面试题-请问js中-是宏任务优先还是微任务优先" tabindex="-1">7. 面试题:请问js中,是宏任务优先还是微任务优先? <a class="header-anchor" href="#_7-面试题-请问js中-是宏任务优先还是微任务优先" aria-label="Permalink to &quot;7. 面试题:请问js中,是宏任务优先还是微任务优先?&quot;">​</a></h2><p>回答: 代码的执行过程是这样的，首先执行主线程代码，然后清空微任务队列，在去一个一个的执行宏任务队列里的代码。如果把主线程代码当作第一个宏任务来看待,那么就是宏任务优先，如果不把主线程代码当作是第一个宏任务,那么就是微任务优先。</p><p>常见的微任务有哪些？</p><p>Promise的.then方法、async/await、 HTML5新增的mutationObserver</p><p>简介:它可以监视页面上某个DOM节点的结构变化,如果发生变化,就会执行对应的回调函数</p><p>常见的宏任务有哪些？</p><p>定时器，ajax请求，DOM事件</p><h2 id="_8-js是单线程的-浏览器是多线程的。" tabindex="-1">8.js是单线程的，浏览器是多线程的。 <a class="header-anchor" href="#_8-js是单线程的-浏览器是多线程的。" aria-label="Permalink to &quot;8.js是单线程的，浏览器是多线程的。&quot;">​</a></h2><p>由于js是单线程的，所以他同时只能干一件事，浏览器是多线程多进程的软件，每一个页签都是一个独立的进程，它内部包含js线程和GUI线程。要注意的是js线程不能和GUI线程同时工作</p><p>​ 首次页面整体流程:</p><p>​ 首先执行主线程代码-&gt;清空微任务队列-&gt;GUI线程渲染页面-&gt;执行下一个宏任务</p><p>​ 更新页面整体流程:</p><p>​ 清空微任务队列-&gt;GUI线程渲染页面-&gt;执行下一个宏任务</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">面试题</span><span style="color:#E1E4E8;">:请问如果在主线程代码中,出现一个100E次的for循环,页面能否立即看到</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">回答</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        js线程和GUI线程是互斥的,而且GUI线程渲染页面的时间,是在微任务队列清空之后</span></span>
<span class="line"><span style="color:#E1E4E8;">        所以如果主线程代码被for循环阻塞了10s,页面也会延迟10s渲染</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">面试题2</span><span style="color:#E1E4E8;">:请问有没有什么方法,能够加快这里页面的渲染</span><span style="color:#F97583;">?</span></span>
<span class="line"><span style="color:#E1E4E8;">    回答</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        可以使用web worker可以开启额外的线程,将比较费时间的事情,交给这个线程去做</span></span>
<span class="line"><span style="color:#E1E4E8;">        那么就可以防止主线程的阻塞,加快页面渲染</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">流程</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        1.创建worker实例对象,会同时创建一个新的分线程</span></span>
<span class="line"><span style="color:#E1E4E8;">            需要提前准备好worker.js文件</span></span>
<span class="line"><span style="color:#E1E4E8;">            该文件内部,需要写好onmessage监听</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        2.将需要执行的代码,以字符串的形式,发送给新创建的分线程执行</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">语法</span><span style="color:#E1E4E8;">:worker.</span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">(需要执行的代码字符串)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        3.由于主线程执行了postMessage方法,所以会触发worker.js文件中的onmessage的回调函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        4.在worker.js文件中的onmessage的回调函数中,我们使用eval函数,将传过来的代码字符串进行执行</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        5.最终,等分线程执行完所有的代码之后,分线程在使用postMessage,将处理好的数据发回给主线程即可</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">注意</span><span style="color:#E1E4E8;">:分线程中执行的代码,不会阻塞主线程代码的执行,所以相当于可以加快主线程代码</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">面试题</span><span style="color:#24292E;">:请问如果在主线程代码中,出现一个100E次的for循环,页面能否立即看到</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">回答</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        js线程和GUI线程是互斥的,而且GUI线程渲染页面的时间,是在微任务队列清空之后</span></span>
<span class="line"><span style="color:#24292E;">        所以如果主线程代码被for循环阻塞了10s,页面也会延迟10s渲染</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">面试题2</span><span style="color:#24292E;">:请问有没有什么方法,能够加快这里页面的渲染</span><span style="color:#D73A49;">?</span></span>
<span class="line"><span style="color:#24292E;">    回答</span><span style="color:#D73A49;">:</span></span>
<span class="line"><span style="color:#24292E;">        可以使用web worker可以开启额外的线程,将比较费时间的事情,交给这个线程去做</span></span>
<span class="line"><span style="color:#24292E;">        那么就可以防止主线程的阻塞,加快页面渲染</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">流程</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        1.创建worker实例对象,会同时创建一个新的分线程</span></span>
<span class="line"><span style="color:#24292E;">            需要提前准备好worker.js文件</span></span>
<span class="line"><span style="color:#24292E;">            该文件内部,需要写好onmessage监听</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        2.将需要执行的代码,以字符串的形式,发送给新创建的分线程执行</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">语法</span><span style="color:#24292E;">:worker.</span><span style="color:#6F42C1;">postMessage</span><span style="color:#24292E;">(需要执行的代码字符串)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        3.由于主线程执行了postMessage方法,所以会触发worker.js文件中的onmessage的回调函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        4.在worker.js文件中的onmessage的回调函数中,我们使用eval函数,将传过来的代码字符串进行执行</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        5.最终,等分线程执行完所有的代码之后,分线程在使用postMessage,将处理好的数据发回给主线程即可</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">注意</span><span style="color:#24292E;">:分线程中执行的代码,不会阻塞主线程代码的执行,所以相当于可以加快主线程代码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h1 id="五-谈谈什么是事件循环机制。" tabindex="-1">五. 谈谈什么是事件循环机制。 <a class="header-anchor" href="#五-谈谈什么是事件循环机制。" aria-label="Permalink to &quot;五. 谈谈什么是事件循环机制。&quot;">​</a></h1><p>好的，面试官。JavaScript代码在执行过程中，除了依靠函数调用栈来确定函数的执行顺序外，还依靠任务队列(task queue)来对异步回调代码的执行。而任务队列又分为宏任务队列和微任务队列，异步代码又分为宏任务和微任务，宏任务会放到宏任务队列里面，微任务会放到微任务队列里面。当同步代码在函数调用栈全部执行完毕，则会去清空微任务队列，然后将一个宏任务推到函数调用栈执行(入栈)，执行完毕后会再次去清空微任务队列，然后再次推送一个宏任务到函数调用栈执行，重复以上操作，直到任务队列为空或者程序被关闭。整个执行过程，我们称为事件循环过程。</p><h1 id="六-promise" tabindex="-1">六. Promise <a class="header-anchor" href="#六-promise" aria-label="Permalink to &quot;六. Promise&quot;">​</a></h1><h2 id="_1-promise是什么" tabindex="-1">1. Promise是什么？ <a class="header-anchor" href="#_1-promise是什么" aria-label="Permalink to &quot;1. Promise是什么？&quot;">​</a></h2><p>好的，面试官。Promise是ES6规范推出的新技术，是js中用于处理异步操作的对象，是用于解决回调地狱问题的方案，是js进行异步编程的新解决方案(旧的解决方案为单纯的使用回调函数)。一个 Promise 对象有三种状态：pending（等待中）、fulfilled（已完成）和rejected（已失败）。当一个异步操作完成时，Promise 可以通过 resolve 方法将其状态从 pending 改变为 fulfilled，将操作结果传递给后续处理程序；如果操作失败，则可以通过 reject 方法将 Promise 状态从 pending 改变为 rejected，传递错误信息给后续处理程序。在Promise对象的执行过程中，一旦状态改变就不可逆，同时可以通过链式调用.then 和 .catch 方法来对异步操作的完成或失败进行处理，这样可以更加清晰地表达代码逻辑。</p><h2 id="_2-async和await" tabindex="-1">2. async和await <a class="header-anchor" href="#_2-async和await" aria-label="Permalink to &quot;2. async和await&quot;">​</a></h2><ol><li><p>async和await是什么?</p><p>async和await都是关键字，他们是ES7的新特性语法，也是Promise和.then的语法糖。</p></li><li><p>为什么要使用async和await？</p><p>async和await是解决回调地狱的最终解决方案，他们可以实现让开发者编写异步代码跟写同步代码一样，让代码更加简洁易读。</p></li><li><p>怎么使用async和await?</p><p>async可以单独使用，而且要将async关键字写在函数函数声明前。async函数返回的为一个全新的Promise对象，如果函数内部出现报错，则返回的为失败的Promise对象。await不能单独使用，需要跟async配合使用，写在async函数内部，await右侧Promise对象返回成功，await表达式的返回值为返回成功的结果，则async函数就返回成的Promise对象，返回时失败，则async函数就返回失败的Promise对象，使用了await关键字会阻塞后续代码的执行(函数内部后续代码的执行)。如果await返回的是非Promise的数据，那么await表达式就会把这个数据作为结果返回。</p></li></ol><h1 id="七-事件机制" tabindex="-1">七. 事件机制 <a class="header-anchor" href="#七-事件机制" aria-label="Permalink to &quot;七. 事件机制&quot;">​</a></h1><h2 id="_1-什么是事件" tabindex="-1">1. 什么是事件？ <a class="header-anchor" href="#_1-什么是事件" aria-label="Permalink to &quot;1. 什么是事件？&quot;">​</a></h2><p>事件是指在开发中，当某些情况或动作发生时，HTML文档中的元素会调度事件并通知相应的事件处理程序。事件一般由三个部分组成：1. 事件源：事件发生时，浏览器会将一个事件对象传递给事件处理程序，包含着有关事件的信息，例如事件类型、触发元素等。2. 事件名：表示发生事件的类型。3. 事件处理程序：处理待定事件的代码。</p><h2 id="_2-事件机制分为几个阶段" tabindex="-1">2. 事件机制分为几个阶段？ <a class="header-anchor" href="#_2-事件机制分为几个阶段" aria-label="Permalink to &quot;2. 事件机制分为几个阶段？&quot;">​</a></h2><p>事件机制：多个事件同时触发,那么他们执行顺序规则就是事件机制</p><p>1.捕获阶段：从最外层document开始，事件捕获是从外向内逐渐进行事件的处理。</p><p>2.目标阶段：触发当前目标元素身上所有的同类型事件。</p><p>3.冒泡阶段：事件冒泡是从内向外逐渐进行处理，直到document最外层</p><p>注意:这三个阶段是一个整体,是一套完整的流程,任何一个地方断开,那么后续事件都不会触发</p><p>如何阻止事件冒泡？</p><ul><li>标准事件机制:event.stopPropagation(); 因为事件机制是一体的,所以这一个方法就可以阻止后续阶段的执行</li></ul><h2 id="_3-什么是事件委托-事件委派" tabindex="-1">3. 什么是事件委托(事件委派)？ <a class="header-anchor" href="#_3-什么是事件委托-事件委派" aria-label="Permalink to &quot;3. 什么是事件委托(事件委派)？&quot;">​</a></h2><p>事件委托是一种优化js代码的技术，它通过将事件处理程序添加到父元素，然后通过事件冒泡实现子元素触发事件时委托给父元素处理，来减少事件处理程序的数量，提高性能和代码可维护性。这种方法可以避免每个子元素都添加一个事件处理程序，从而减少内存消耗。同时，它也可以让动态添加的元素同样适用于相同的事件处理程序。</p><h2 id="_4-封装一个绑带事件监听的函数-有难度" tabindex="-1">4. 封装一个绑带事件监听的函数(有难度) <a class="header-anchor" href="#_4-封装一个绑带事件监听的函数-有难度" aria-label="Permalink to &quot;4. 封装一个绑带事件监听的函数(有难度)&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* </span></span>
<span class="line"><span style="color:#6A737D;">绑定事件监听的通用函数(不带委托)</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bindEvent1</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">ele</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">type</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">fn</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  ele.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(type, fn)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* </span></span>
<span class="line"><span style="color:#6A737D;">绑定事件监听的通用函数(带委托)</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bindEvent2</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ele</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">type</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">fn</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">selector</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  ele.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(type, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">target</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.target</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (selector) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (target.</span><span style="color:#B392F0;">matches</span><span style="color:#E1E4E8;">(selector)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        fn.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(target, event)</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      fn.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(ele, event)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">ul</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">bindEvent2(ul, &#39;click&#39;, function(event){}, &#39;li&#39;)</span></span>
<span class="line"><span style="color:#E1E4E8;">bindEvent2(ul, &#39;click&#39;, function(event){console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">,event)})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* </span></span>
<span class="line"><span style="color:#6A737D;">绑定事件监听的通用函数(不带委托)</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bindEvent1</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">ele</span><span style="color:#24292E;">, </span><span style="color:#E36209;">type</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fn</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  ele.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(type, fn)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* </span></span>
<span class="line"><span style="color:#6A737D;">绑定事件监听的通用函数(带委托)</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">bindEvent2</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ele</span><span style="color:#24292E;">, </span><span style="color:#E36209;">type</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fn</span><span style="color:#24292E;">, </span><span style="color:#E36209;">selector</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  ele.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(type, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">event</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">target</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.target</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (selector) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (target.</span><span style="color:#6F42C1;">matches</span><span style="color:#24292E;">(selector)) {</span></span>
<span class="line"><span style="color:#24292E;">        fn.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(target, event)</span></span>
<span class="line"><span style="color:#24292E;">      } </span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      fn.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(ele, event)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">ul</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">   &lt;</span><span style="color:#22863A;">span</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">li</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">ul</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">bindEvent2(ul, &#39;click&#39;, function(event){}, &#39;li&#39;)</span></span>
<span class="line"><span style="color:#24292E;">bindEvent2(ul, &#39;click&#39;, function(event){console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">,event)})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h1 id="八-ajax相关问题" tabindex="-1">八. ajax相关问题 <a class="header-anchor" href="#八-ajax相关问题" aria-label="Permalink to &quot;八. ajax相关问题&quot;">​</a></h1><h2 id="_1-说说常见的状态码。" tabindex="-1">1. 说说常见的状态码。 <a class="header-anchor" href="#_1-说说常见的状态码。" aria-label="Permalink to &quot;1. 说说常见的状态码。&quot;">​</a></h2><p>2xx:表示成功处理请求</p><p>​ 200=&gt;代表请求完全成功，没有任何问题 <strong>强缓存的状态码为200</strong></p><p>​ 201=&gt;代表本次请求成功了，但是参数不对</p><p>3xx:需要重定向，浏览器直接跳转</p><p>​ 302=&gt;代表地址重定向，用户请求服务器去哪个路径服务器就控制浏览器重定向去哪个页面。</p><p>​ 304=&gt;代表协商缓存</p><p><strong>网络缓存分为两种,一种是协商缓存,一种是强缓存</strong></p><p>​ 强缓存就是将本次请求的文件资源缓存在硬盘中,下次还想请求该资源的时候,就<strong>不需要在发请求了</strong>,会直接从硬盘中读 取上次的文件,不过这个缓存会有一个max-age属性(最大超时时间)</p><p>​ 协商缓存就是将本次请求的文件资源缓存在硬盘中,下次想要请求该文件的时候,还是<strong>会发送请求</strong>,将当前缓存文件的**最后修改时间(last-modified)和文件唯一标识hash值(e-tag)**发送给服务器,服务器对比文件的这两个数据,如果与服务器上的文件相同,那么就返回状态码304,并且不会返回文件</p><p>4xx:客户端请求错误</p><p>​ 403=&gt;代表具有资源，但拒绝访问，权限不够</p><p>​ 404=&gt;代表找不到请求的资源，可能是请求路径写错了</p><p>5xx:服务器端错误</p><p>​ 500=&gt;代表服务器崩溃,服务器出BUG了,无法处理当前请求</p><p>​ 501=&gt;代表服务器无法处理当前请求,一般是请求方式不对</p><h2 id="_2-手写一下ajax请求的基本流程代码" tabindex="-1">2. 手写一下ajax请求的基本流程代码 <a class="header-anchor" href="#_2-手写一下ajax请求的基本流程代码" aria-label="Permalink to &quot;2. 手写一下ajax请求的基本流程代码&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;btn&quot;</span><span style="color:#E1E4E8;">&gt;点击发送&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    //获取按钮</span></span>
<span class="line"><span style="color:#E1E4E8;">    const btn = document.getElementById(&#39;btn&#39;)</span></span>
<span class="line"><span style="color:#E1E4E8;">    //绑定事件</span></span>
<span class="line"><span style="color:#E1E4E8;">    btn.onclick = function(){</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//创建实例对象</span></span>
<span class="line"><span style="color:#E1E4E8;">      const xhr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">XMLHttpRequest</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//初始化</span></span>
<span class="line"><span style="color:#E1E4E8;">      xhr.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;method&#39;</span><span style="color:#E1E4E8;">,url,</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//发送请求</span></span>
<span class="line"><span style="color:#E1E4E8;">      xhr.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">({a:</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">//绑定事件  处理服务器返回的结果</span></span>
<span class="line"><span style="color:#E1E4E8;">      xhr.</span><span style="color:#B392F0;">onreadystatechange</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(xhr.readyState </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(xhr.status </span><span style="color:#F97583;">&gt;=</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> xhr.status </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">300</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">//设置 result 的文本</span></span>
<span class="line"><span style="color:#E1E4E8;">            result.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> xhr.response;</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;btn&quot;</span><span style="color:#24292E;">&gt;点击发送&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    //获取按钮</span></span>
<span class="line"><span style="color:#24292E;">    const btn = document.getElementById(&#39;btn&#39;)</span></span>
<span class="line"><span style="color:#24292E;">    //绑定事件</span></span>
<span class="line"><span style="color:#24292E;">    btn.onclick = function(){</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//创建实例对象</span></span>
<span class="line"><span style="color:#24292E;">      const xhr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">XMLHttpRequest</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//初始化</span></span>
<span class="line"><span style="color:#24292E;">      xhr.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;method&#39;</span><span style="color:#24292E;">,url,</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//发送请求</span></span>
<span class="line"><span style="color:#24292E;">      xhr.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">({a:</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">//绑定事件  处理服务器返回的结果</span></span>
<span class="line"><span style="color:#24292E;">      xhr.</span><span style="color:#6F42C1;">onreadystatechange</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(xhr.readyState </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(xhr.status </span><span style="color:#D73A49;">&gt;=</span><span style="color:#005CC5;">200</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> xhr.status </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">300</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">//设置 result 的文本</span></span>
<span class="line"><span style="color:#24292E;">            result.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> xhr.response;</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="_3-跨域" tabindex="-1">3. 跨域 <a class="header-anchor" href="#_3-跨域" aria-label="Permalink to &quot;3. 跨域&quot;">​</a></h2><ol><li><p>什么是跨域？</p><p>违反了浏览器的同源策略</p></li><li><p>什么是同源？</p><p>两个URL的协议名，域名，端口号都相同，着两个Url就是同源</p></li><li><p>为什么会出现跨域报错？</p><p>跨域报错一般出现在浏览器中，是浏览器实现的安全限制，这个安全限制是为了防止恶意网站利用脚本窃取用户的敏感信息，保障用户的安全</p></li><li><p>怎么解决跨域问题？</p><ol><li><p>JSONP解决跨域：利用了javascript标签的天然跨域的特性，通过动态创建script标签，从而绕过了浏览器的同源策略，实现了跨域请求不会报错效果。</p><p>浏览器在接收到响应后，将动态创建一个script标签，将响应内容作为脚本执行，完成对handleResponse函数的调用，从而获取到返回的数据。这样就实现了跨域请求。</p><p>需要注意的是， JSONP只支持GET请求，不支持POST等有副作用的HTTP方法。此外，服务端需要配合客户端使用JSONP，返回的数据需要包裹在回调函数中。</p><p>实现代码</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;btn&quot;</span><span style="color:#E1E4E8;">&gt;发送请求&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        // 全局声明变量用于存储后续返回的数据</span></span>
<span class="line"><span style="color:#E1E4E8;">        var data;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        // 声明一个函数,用于接收数据,并存储到全局的data变量中</span></span>
<span class="line"><span style="color:#E1E4E8;">        function getData(data){</span></span>
<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(data)</span></span>
<span class="line"><span style="color:#E1E4E8;">            window.data</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">data</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        btn.onclick=function(){</span></span>
<span class="line"><span style="color:#E1E4E8;">            let script </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;script&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            script.src</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;http://localhost:5000/jsonp?callback=getData&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            document.body.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(script);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;btn&quot;</span><span style="color:#24292E;">&gt;发送请求&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        // 全局声明变量用于存储后续返回的数据</span></span>
<span class="line"><span style="color:#24292E;">        var data;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        // 声明一个函数,用于接收数据,并存储到全局的data变量中</span></span>
<span class="line"><span style="color:#24292E;">        function getData(data){</span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(data)</span></span>
<span class="line"><span style="color:#24292E;">            window.data</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">data</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        btn.onclick=function(){</span></span>
<span class="line"><span style="color:#24292E;">            let script </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;script&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            script.src</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;http://localhost:5000/jsonp?callback=getData&quot;</span></span>
<span class="line"><span style="color:#24292E;">            document.body.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(script);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">script</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></li><li><p>cors解决跨域：后端做的流程 ，服务器在返回响应的时候,在响应头中,添加配置,来告知浏览器,愿意被当前域名请求即可Access-Control-Allow-Origin: <a href="https://www.baidu.com" target="_blank" rel="noreferrer">https://www.baidu.com</a></p></li><li><p>配置代理解决跨域：开发服务器转发请求的功能，解决跨域问题。其实就是将请求发送到开发服务器上，再由开发服务器将请求转发到目标服务器。这样可以绕过浏览器的同源策略，使得请求能够成功发送并接收响应。两台服务器之间不存在同源策略问题。</p><p>实现代码</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  devServer: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    proxy: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;/api&#39;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        target: </span><span style="color:#9ECBFF;">&#39;http://localhost:3000&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        changeOrigin: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        pathRewrite: {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&#39;^/api&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  devServer: {</span></span>
<span class="line"><span style="color:#24292E;">    proxy: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&#39;/api&#39;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        target: </span><span style="color:#032F62;">&#39;http://localhost:3000&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        changeOrigin: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        pathRewrite: {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&#39;^/api&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;&#39;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ul><li><code>proxy</code> 表示需要代理的请求的路径前缀，例如 <code>/api</code>。</li><li><code>target</code> 表示代理的目标地址，例如 <code>http://localhost:3000</code>。</li><li><code>changeOrigin</code> 表示是否改变请求头中的 origin 字段，一般设置为 true。</li><li><code>pathRewrite</code> 表示将请求的路径重写，例如将 <code>/api/user</code> 重写为 <code>/user</code>。</li></ul></li></ol></li></ol><h1 id="九-浏览器的本地存储" tabindex="-1">九. 浏览器的本地存储 <a class="header-anchor" href="#九-浏览器的本地存储" aria-label="Permalink to &quot;九.  浏览器的本地存储&quot;">​</a></h1><h2 id="_1-说说localstorage、sessionstorage与cookie的区别" tabindex="-1">1. 说说localStorage、sessionStorage与Cookie的区别 <a class="header-anchor" href="#_1-说说localstorage、sessionstorage与cookie的区别" aria-label="Permalink to &quot;1. 说说localStorage、sessionStorage与Cookie的区别&quot;">​</a></h2><p>他们都是浏览器端用来存储数据的技术，但是又有不同之处</p><pre><code>1. 存储数据的生命周期：
   - localStorage:  数据持久化存储，只要不主动删除，就会永久存在
   - sessionStorage: 数据会话存储，当页面或浏览器关闭后自动清除
   - Cookie: 一般由服务器生成，通过max-age属性设置cookie的有效时间

2. 数据存放大小：
 - localStorage：最大存储5Mb，存储在硬盘中
 - sessionStorage：最大存储5Mb，存储在内存中
 - Cookie: 最大存储4KB，设置了max-age属性存储在硬盘中，没有设置则存储在内存中

3. 与服务器的关系：
 - localStorage：存储在客户端
 - sessionStorage：存储在客户端
 - Cookie：服务器创建的，浏览器会自动存储cookie,还会自动发送cookie

4. 数据共享限制：
 - localStorage和sessionStorage只能在当前源中使用，不能跨域访问
 - Cookie可以在同一域名下跨域访问
</code></pre><h2 id="_2-如何实现跨标签页通信" tabindex="-1">2. 如何实现跨标签页通信？ <a class="header-anchor" href="#_2-如何实现跨标签页通信" aria-label="Permalink to &quot;2. 如何实现跨标签页通信？&quot;">​</a></h2><p>两个页面之间实现数据的通信</p><ol><li><p>使用localStorage和storage事件来实现</p><p>在B页面,给window对象,绑定storage事件,并传入回调函数用于监视其余标签页对localStorage的新增和修改。在A页面使用localStorage.setItem(key,value)将数据存储到localStorage中，然后在B标签页中使用localStorage.getItem()方法获取数据，当A和B两个标签页都处于打开状态时，它们便可以通过相同的存储键来进行数据交互。</p></li><li><p>使用路径传参</p><p>在A页面中绑定window.open方法，跳转到一个全新的标签页，在跳转的路径中添加query参数。跳转到B页面的时候,B页面可以通过window.location.search属性,获取到路径中的参数</p></li><li><p>使用domain属性实现</p><p>在A页面通过window.open方法打开一个全新的标签页，通过open方法可以获取到打开B页面的window对象，在A和B页面中,都执行document.domain=&quot;共同的顶级域名&quot;，在B页面中,给自己的window对象,添加属性和属性值，在A页面中,就可以通过流程1中,得到的w1对象,获取到B页面存储的数据,也可以对其进行修改，实现了两个标签页数据的互通。</p></li></ol><h1 id="十-从输入url到渲染出页面的整个过程" tabindex="-1">十. 从输入url到渲染出页面的整个过程 <a class="header-anchor" href="#十-从输入url到渲染出页面的整个过程" aria-label="Permalink to &quot;十. 从输入url到渲染出页面的整个过程&quot;">​</a></h1><ol><li><p>DNS解析：将域名解析为ip地址，查找浏览器缓存中的DNS记录，如果没有，会向本地的DNS服务器发出请求。如果本地DNS服务器没有缓存该记录，它会向其他DNS服务器发出请求，直到找到对应的IP地址。</p></li><li><p>建立TCP连接：TCP三次握手，建立连接</p></li><li><p>发送请求：将请求报文发出去</p></li><li><p>接收响应的数据：接收到响应报文</p></li><li><p>解析渲染页面：</p><ul><li><p>遇到HTML,调用HTML解析器，解析成DOM树</p></li><li><p>遇到CSS,调用CSS解析器,解析成CSSOM树</p></li><li><p>遇到JS,调用JS解析器，解析JS代码，在解析过程中会拦截HTML的解析和CSS的解析</p><ul><li>在解析JS代码时，可能要修改元素节点，然后会重新调用HTML解析器，解析更新DOM树</li><li>还可能要修改样式节点，然后会重新调用CSS解析器，解析更新CSSOM树</li></ul></li><li><p>最后将DOM树和CSSOM树结合成render树</p></li><li><p>layout布局：计算元素的位置和大小信息</p></li><li><p>进行render渲染</p><ul><li><strong>重绘:重新绘制,如果元素的颜色,文字等信息,放生变化,不影响到其余元素的布局,就会发生重新绘制操作</strong></li><li><strong>重排一定会有重绘,重绘不一定会出现重排</strong></li></ul></li></ul></li><li><p>断开TCP连接：TCP的四次挥手(断开请求连接 2 次, 断开响应连接 2 次)</p></li></ol><h1 id="十一-http1-0和http1-1和http2-0的区别" tabindex="-1">十一. http1.0和http1.1和http2.0的区别 <a class="header-anchor" href="#十一-http1-0和http1-1和http2-0的区别" aria-label="Permalink to &quot;十一. http1.0和http1.1和http2.0的区别&quot;">​</a></h1><h2 id="_1-http1-0和http1-1的区别" tabindex="-1">1. http1.0和http1.1的区别 <a class="header-anchor" href="#_1-http1-0和http1-1的区别" aria-label="Permalink to &quot;1. http1.0和http1.1的区别&quot;">​</a></h2><ul><li>缓存处理</li><li>带宽优化及网络连接的使用</li><li>错误通知的管理</li><li>Host头的处理：每个请求都需要携带Host属性</li><li>长连接：在一个TCP连接上可以传送多个http请求和响应，减少了建立和关闭连接的消耗和延迟</li></ul><h2 id="_2-http和https的区别" tabindex="-1">2.http和https的区别 <a class="header-anchor" href="#_2-http和https的区别" aria-label="Permalink to &quot;2.http和https的区别&quot;">​</a></h2><ul><li>http所传输的内容是明文，但https传输的内容是经过加密的</li><li>https可以有效防止DNS劫持</li><li>端口号不一样，http默认端口是80，https的默认端口是443</li></ul><h2 id="_3-http2-0相比http1-1的新特性" tabindex="-1">3.http2.0相比http1.1的新特性 <a class="header-anchor" href="#_3-http2-0相比http1-1的新特性" aria-label="Permalink to &quot;3.http2.0相比http1.1的新特性&quot;">​</a></h2><ol><li><p>新的二进制格式,解析模式从原本的文本解析,变更为二进制解析</p></li><li><p>多路复用,一个请求可以请求多个资源</p></li><li><p>header压缩,通讯双方都缓存一份header,后续传输即可省略该部分</p></li><li><p>服务器推送</p></li></ol><h1 id="十二-二次封装axios" tabindex="-1">十二. 二次封装axios <a class="header-anchor" href="#十二-二次封装axios" aria-label="Permalink to &quot;十二. 二次封装axios&quot;">​</a></h1><ol><li><p>配置通用的基础路径和超时时间</p><ol><li>基础路径可以延伸到proxy规则以及跨域相关内容</li><li><strong>超时时间可以延伸到请求并发数量问题,以及网络性能优化相关</strong><ol><li><strong>小程序最多同时并发10个请求,Chrome和Firefox最多并发6个</strong></li><li><strong>超时时间就是为了方式部分请求占用请求通道时间过长,降低项目性能</strong><ol><li><strong>所以一旦达到了超时时间,那么该请求就会被视为失败,状态码404</strong></li></ol></li></ol></li></ol></li><li><p>显示请求进度条</p><ol><li>显示进度条: 请求拦截器回调</li><li>结束进度条: 响应拦截器回调</li></ol></li><li><p>成功返回的数据不再是response, 而直接是响应体数据response.data</p></li><li><p>统一处理请求错误, 具体请求也可以选择处理或不处理</p></li><li><p><strong>每个请求自动携带userTempId的请求头: 在请求拦截器中实现</strong></p><ol><li><strong>uuid是根据当前电脑生成的一个临时凭证</strong></li><li><strong>如果用户没有登录,但是想要将商品加入购物车,那么服务器就会根据uuid,临时创建一个购物车用于存储商品信息</strong></li></ol></li><li><p><strong>如果当前有token, 自动携带token的请求头</strong></p><ol><li><strong>token是根据用户的唯一标识id,生成的一个乱码字符串(相当于是用户的身份证明)</strong></li><li><strong>如果用户已经登录了,想要将商品加入购物车,那么服务器就会根据token,解析得到用户的id,然后将该商品添加到用户的私人购物车中</strong></li><li><strong>扩展:如果用户发请求的时候,同时具有uuid和token,那么临时购物车的内容会合并入私人购物车中</strong></li></ol></li><li><p><strong>对token过期的错误进行处理</strong></p><ol><li><p><strong>token是否过期一定是后端判断的</strong></p></li><li><p><strong>token其实是根据用户的id+创建时间+特殊的字符串(盐),在经过加密得到的一个字符串</strong></p></li><li><p><strong>如果服务器判断token已经过期,那么不会返回任何数据,只会返回响应,状态码为401</strong></p><ol><li><p><strong>与钱有关的,一般5-15分钟换一个新的</strong></p></li><li><p><strong>与钱无关的,一般7-15天换一个新的</strong></p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> axios </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;axios&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> NProgress </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;nprogress&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;nprogress/nprogress.css&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> store </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@/store&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> router </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@/router&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { v4 </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> uuidv4 } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;uuid&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">NProgress.</span><span style="color:#B392F0;">configure</span><span style="color:#E1E4E8;">({ showSpinner: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> }) </span><span style="color:#6A737D;">// 隐藏右侧的旋转进度条</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建instance</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">instance</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> axios.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// baseURL: &#39;http://182.92.128.115/api&#39;,</span></span>
<span class="line"><span style="color:#E1E4E8;">  baseURL: </span><span style="color:#9ECBFF;">&#39;/api&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  timeout: </span><span style="color:#79B8FF;">20000</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 指定请求拦截器</span></span>
<span class="line"><span style="color:#E1E4E8;">instance.interceptors.request.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 显示进度条: 请求拦截器回调</span></span>
<span class="line"><span style="color:#E1E4E8;">  NProgress.</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* 每个请求自动携带userTempId的请求头: 在请求拦截器中实现 */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">userTempId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">uuidv4</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  config.headers.userTempId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userTempId</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* 6. 如果当前有token, 自动携带token的请求头 */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">token</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> store.state.user.token</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (token) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    config.headers.token </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> token</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> config </span><span style="color:#6A737D;">// 必须返回config</span></span>
<span class="line"><span style="color:#E1E4E8;">}) </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 指定响应拦截器</span></span>
<span class="line"><span style="color:#E1E4E8;">instance.interceptors.response.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 成功的回调</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 结束进度条: 响应拦截器回调</span></span>
<span class="line"><span style="color:#E1E4E8;">    NProgress.</span><span style="color:#B392F0;">done</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 成功返回的数据不再是response, 而直接是响应体数据response.data</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> response.data</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 失败的回调</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 结束进度条: 响应拦截器回调</span></span>
<span class="line"><span style="color:#E1E4E8;">    NProgress.</span><span style="color:#B392F0;">done</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 统一处理请求错误, 具体请求也可以选择处理或不处理</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// alert(&#39;请求出错: &#39; + error.message||&#39;未知错误&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 取出响应对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">response</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> error</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果是请求处理出错</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (response </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> response.status) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 401说明token非法</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (response.status </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">401</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果当前没在登陆页</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (router.currentRoute.path</span><span style="color:#F97583;">!==</span><span style="color:#9ECBFF;">&#39;/login&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 分发action去清除用户token信息</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> store.</span><span style="color:#B392F0;">dispatch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;logout&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 跳转到登陆页面</span></span>
<span class="line"><span style="color:#E1E4E8;">          router.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/login&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 提示</span></span>
<span class="line"><span style="color:#E1E4E8;">          message.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;登陆已过期, 请重新登陆&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        message.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;请求出错: &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> error.message</span><span style="color:#F97583;">||</span><span style="color:#9ECBFF;">&#39;未知错误&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">response) { </span><span style="color:#6A737D;">// 网络连接不上服务器</span></span>
<span class="line"><span style="color:#E1E4E8;">      message.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;您的网络发生异常，无法连接服务器&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// throw error</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">reject</span><span style="color:#E1E4E8;">(error) </span><span style="color:#6A737D;">// 将错误向下传递</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 向外暴露instance</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> instance</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> axios </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;axios&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> NProgress </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;nprogress&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;nprogress/nprogress.css&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> store </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@/store&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> router </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@/router&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { v4 </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> uuidv4 } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;uuid&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">NProgress.</span><span style="color:#6F42C1;">configure</span><span style="color:#24292E;">({ showSpinner: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;"> }) </span><span style="color:#6A737D;">// 隐藏右侧的旋转进度条</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建instance</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">instance</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> axios.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// baseURL: &#39;http://182.92.128.115/api&#39;,</span></span>
<span class="line"><span style="color:#24292E;">  baseURL: </span><span style="color:#032F62;">&#39;/api&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  timeout: </span><span style="color:#005CC5;">20000</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 指定请求拦截器</span></span>
<span class="line"><span style="color:#24292E;">instance.interceptors.request.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span><span style="color:#E36209;">config</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 显示进度条: 请求拦截器回调</span></span>
<span class="line"><span style="color:#24292E;">  NProgress.</span><span style="color:#6F42C1;">start</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* 每个请求自动携带userTempId的请求头: 在请求拦截器中实现 */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">userTempId</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">uuidv4</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  config.headers.userTempId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userTempId</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* 6. 如果当前有token, 自动携带token的请求头 */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">token</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> store.state.user.token</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (token) {</span></span>
<span class="line"><span style="color:#24292E;">    config.headers.token </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> token</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> config </span><span style="color:#6A737D;">// 必须返回config</span></span>
<span class="line"><span style="color:#24292E;">}) </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 指定响应拦截器</span></span>
<span class="line"><span style="color:#24292E;">instance.interceptors.response.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">response</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 成功的回调</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 结束进度条: 响应拦截器回调</span></span>
<span class="line"><span style="color:#24292E;">    NProgress.</span><span style="color:#6F42C1;">done</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 成功返回的数据不再是response, 而直接是响应体数据response.data</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> response.data</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#E36209;">error</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 失败的回调</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 结束进度条: 响应拦截器回调</span></span>
<span class="line"><span style="color:#24292E;">    NProgress.</span><span style="color:#6F42C1;">done</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 统一处理请求错误, 具体请求也可以选择处理或不处理</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// alert(&#39;请求出错: &#39; + error.message||&#39;未知错误&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 取出响应对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">response</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> error</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 如果是请求处理出错</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (response </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> response.status) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 401说明token非法</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (response.status </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">401</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果当前没在登陆页</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (router.currentRoute.path</span><span style="color:#D73A49;">!==</span><span style="color:#032F62;">&#39;/login&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 分发action去清除用户token信息</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> store.</span><span style="color:#6F42C1;">dispatch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;logout&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 跳转到登陆页面</span></span>
<span class="line"><span style="color:#24292E;">          router.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/login&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6A737D;">// 提示</span></span>
<span class="line"><span style="color:#24292E;">          message.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;登陆已过期, 请重新登陆&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        message.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;请求出错: &#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> error.message</span><span style="color:#D73A49;">||</span><span style="color:#032F62;">&#39;未知错误&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">response) { </span><span style="color:#6A737D;">// 网络连接不上服务器</span></span>
<span class="line"><span style="color:#24292E;">      message.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;您的网络发生异常，无法连接服务器&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// throw error</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">reject</span><span style="color:#24292E;">(error) </span><span style="color:#6A737D;">// 将错误向下传递</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 向外暴露instance</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> instance</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br></div></div></li></ol></li></ol></li></ol><h1 id="十三-防抖和节流" tabindex="-1">十三. 防抖和节流 <a class="header-anchor" href="#十三-防抖和节流" aria-label="Permalink to &quot;十三. 防抖和节流&quot;">​</a></h1><h2 id="什么是防抖和节流-为什么要使用防抖和节流-他们有什么不同" tabindex="-1">什么是防抖和节流？为什么要使用防抖和节流？他们有什么不同？ <a class="header-anchor" href="#什么是防抖和节流-为什么要使用防抖和节流-他们有什么不同" aria-label="Permalink to &quot;什么是防抖和节流？为什么要使用防抖和节流？他们有什么不同？&quot;">​</a></h2><p>好的，面试官。防抖和节流是两种前端性能优化的技巧，用于控制事件的触发频率，提高页面的性能。当没有使用防抖和节流之前，按钮连续点击多次导致事件的多次触发，事件的回调函数执行多次。当我们通过这个按钮发请求时就会连续发送，我们想要降低请求的次数，缓解后端服务器的压力。所以可以使用防抖和节流降低一个回调函数的执行频率。</p><ul><li><p>防抖：防抖是在一定的时间内只让最后一次操作有效，它会忽略中间的操作。想要触发第二次事件，则要等待一段时间(具体等待时间程序员可设置)。可以在用户搜索关键字中使用防抖实现请求次数的减少。因为用在输入关键字时可能会连续输入，就会导致发送多次请求，所以我们可以等用户输入完之后的一段时间内在发送请求</p></li><li><p>节流：节流是在指定的时间内只允许执行一次操作，限制了函数的执行次数。可以在用户的登入页面对登入按钮使用节流，这样可以限制用户频繁点击登入操作，减少对登入接口触发的频率，对滚动事件也可以使用节流操作。</p><p>区别：防抖 -&gt; 会延迟回调函数的执行时间，但是使用的数据都是最新的</p><p>​ 节流 -&gt; 会立即执行一次回调函数，但是使用的数据都是旧数据</p><p>防抖通过闭包和定时器实现了对回调函数执行频率的控制，闭包对象保存着定时器的返回值，点击的时间超过设置的时间后就会清除定时器，当再次点击重新使用了一个定时器。</p><p>节流通过闭包保存上一次触发的时间，用最新的事件减去上一次触发的时间，间隔时间大于设定的时间就执行一次回调函数，不大于就不执行。</p></li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cb</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;btn click success&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 该函数中需要发送请求    </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//以下代码是防抖代码</span></span>
<span class="line"><span style="color:#E1E4E8;">btn.onclick </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">debounce</span><span style="color:#E1E4E8;">(cb,</span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">debounce</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">delay</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> timer;</span><span style="color:#6A737D;">//保存了定时器的返回值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(timer){</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">clearTimeout</span><span style="color:#E1E4E8;">(timer);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        timer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(()</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        },delay)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cb</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;btn click success&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 该函数中需要发送请求    </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//以下代码是防抖代码</span></span>
<span class="line"><span style="color:#24292E;">btn.onclick </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">debounce</span><span style="color:#24292E;">(cb,</span><span style="color:#005CC5;">2000</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">debounce</span><span style="color:#24292E;">(</span><span style="color:#E36209;">callback</span><span style="color:#24292E;">,</span><span style="color:#E36209;">delay</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> timer;</span><span style="color:#6A737D;">//保存了定时器的返回值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(timer){</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">clearTimeout</span><span style="color:#24292E;">(timer);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        timer </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(()</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        },delay)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cb</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;btn click success&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 该函数中需要发送请求    </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">//以下代码是节流代码</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">throttle</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">delay</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> startTime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">//保存上一次触发的时间</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 这个全新的匿名函数,才是真正的事件回调函数</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// console.log(111)</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(Date.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> startTime </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> delay){</span></span>
<span class="line"><span style="color:#E1E4E8;">             startTime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Date.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">             </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">         }</span></span>
<span class="line"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cb</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;btn click success&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 该函数中需要发送请求    </span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">//以下代码是节流代码</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">throttle</span><span style="color:#24292E;">(</span><span style="color:#E36209;">callback</span><span style="color:#24292E;">,</span><span style="color:#E36209;">delay</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> startTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//保存上一次触发的时间</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 这个全新的匿名函数,才是真正的事件回调函数</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// console.log(111)</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> startTime </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> delay){</span></span>
<span class="line"><span style="color:#24292E;">             startTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">             </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">         }</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>`,123),e=[o];function r(c,t,E,y,i,b){return n(),a("div",null,e)}const h=s(p,[["render",r]]);export{m as __pageData,h as default};
